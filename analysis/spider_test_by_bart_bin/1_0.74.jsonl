{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "189", "plan": "SELECT count ( * ) FROM airports", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many airports do we have?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "190", "plan": "SELECT count ( * ) FROM airports", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Return the number of  airports."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "191", "plan": "SELECT count ( * ) FROM flights", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many flights do we have?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "192", "plan": "SELECT count ( * ) FROM flights", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Return the number of flights."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "193", "plan": "SELECT airline FROM airlines WHERE abbreviation = \"UAL\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which airline has abbreviation 'UAL'?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "194", "plan": "SELECT airline FROM airlines WHERE abbreviation = \"UAL\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Give the airline with abbreviation 'UAL'."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "195", "plan": "SELECT count ( * ) FROM airlines WHERE country = \"USA\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many airlines are from USA?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "196", "plan": "SELECT count ( * ) FROM airlines WHERE country = \"USA\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Return the number of airlines in the USA."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Alton  ) , airportcode , airportname ( Alton  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "197", "plan": "SELECT city , country FROM airports WHERE airportname = \"Alton\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which city and country is the Alton airport at?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Alton  ) , airportcode , airportname ( Alton  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "198", "plan": "SELECT city , country FROM airports WHERE airportname = \"Alton\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Give the city and country for the Alton airport."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AKO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AKO ) , destairport (  AKO )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "199", "plan": "SELECT airportname FROM airports WHERE airportcode = \"AKO\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What is the airport name for airport 'AKO'?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AKO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AKO ) , destairport (  AKO )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "200", "plan": "SELECT airportname FROM airports WHERE airportcode = \"AKO\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Return the name of the airport with code 'AKO'."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "201", "plan": "SELECT airportname FROM airports WHERE city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What are airport names at City 'Aberdeen'?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "202", "plan": "SELECT airportname FROM airports WHERE city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What are the names of airports in Aberdeen?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "203", "plan": "SELECT count ( * ) FROM flights WHERE sourceairport = \"APG\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many flights depart from 'APG'?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "204", "plan": "SELECT count ( * ) FROM flights WHERE sourceairport = \"APG\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Count the number of flights departing from 'APG'."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( ATO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "205", "plan": "SELECT count ( * ) FROM flights WHERE destairport = \"ATO\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many flights have destination ATO?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( ATO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "206", "plan": "SELECT count ( * ) FROM flights WHERE destairport = \"ATO\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Count the number of flights into ATO."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "207", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airports AS T2 ON T1 . sourceairport = T2 . airportcode WHERE T2 . city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many flights depart from City Aberdeen?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "208", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airports AS T2 ON T1 . sourceairport = T2 . airportcode WHERE T2 . city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Return the number of flights departing from Aberdeen."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "209", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airports AS T2 ON T1 . destairport = T2 . airportcode WHERE T2 . city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many flights arriving in Aberdeen city?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "210", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airports AS T2 ON T1 . destairport = T2 . airportcode WHERE T2 . city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Return the number of flights arriving in Aberdeen."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Ashley  ) , airportcode , airportname ( Ashley  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "211", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airports AS T2 ON T1 . destairport = T2 . airportcode JOIN airports AS T3 ON T1 . sourceairport = T3 . airportcode WHERE T2 . city = \"Ashley\" AND T3 . city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Ashley  ) , airportcode , airportname ( Ashley  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "212", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airports AS T2 ON T1 . destairport = T2 . airportcode JOIN airports AS T3 ON T1 . sourceairport = T3 . airportcode WHERE T2 . city = \"Ashley\" AND T3 . city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many flights fly from Aberdeen to Ashley?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "213", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airlines AS T2 ON T1 . airline = T2 . uid WHERE T2 . airline = \"JetBlue Airways\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many flights does airline 'JetBlue Airways' have?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "214", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airlines AS T2 ON T1 . airline = T2 . uid WHERE T2 . airline = \"JetBlue Airways\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Give the number of Jetblue Airways flights."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( ASY ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "215", "plan": "SELECT count ( * ) FROM airlines AS T1 JOIN flights AS T2 ON T2 . airline = T1 . uid WHERE T1 . airline = \"United Airlines\" AND T2 . destairport = \"ASY\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many 'United Airlines' flights go to Airport 'ASY'?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( ASY ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "216", "plan": "SELECT count ( * ) FROM airlines AS T1 JOIN flights AS T2 ON T2 . airline = T1 . uid WHERE T1 . airline = \"United Airlines\" AND T2 . destairport = \"ASY\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Count the number of United Airlines flights arriving in ASY Airport."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "217", "plan": "SELECT count ( * ) FROM airlines AS T1 JOIN flights AS T2 ON T2 . airline = T1 . uid WHERE T1 . airline = \"United Airlines\" AND T2 . sourceairport = \"AHD\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many 'United Airlines' flights depart from Airport 'AHD'?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "218", "plan": "SELECT count ( * ) FROM airlines AS T1 JOIN flights AS T2 ON T2 . airline = T1 . uid WHERE T1 . airline = \"United Airlines\" AND T2 . sourceairport = \"AHD\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Return the number of United Airlines flights leaving from AHD Airport."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "219", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airports AS T2 ON T1 . destairport = T2 . airportcode JOIN airlines AS T3 ON T3 . uid = T1 . airline WHERE T2 . city = \"Aberdeen\" AND T3 . airline = \"United Airlines\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many United Airlines flights go to City 'Aberdeen'?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "220", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airports AS T2 ON T1 . destairport = T2 . airportcode JOIN airlines AS T3 ON T3 . uid = T1 . airline WHERE T2 . city = \"Aberdeen\" AND T3 . airline = \"United Airlines\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Count the number of United Airlines flights that arrive in Aberdeen."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "221", "plan": "SELECT T1 . city FROM airports AS T1 JOIN flights AS T2 ON T1 . airportcode = T2 . destairport GROUP BY T1 . city ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which city has most number of arriving flights?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "222", "plan": "SELECT T1 . city FROM airports AS T1 JOIN flights AS T2 ON T1 . airportcode = T2 . destairport GROUP BY T1 . city ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which city has the most frequent destination airport?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "223", "plan": "SELECT T1 . city FROM airports AS T1 JOIN flights AS T2 ON T1 . airportcode = T2 . sourceairport GROUP BY T1 . city ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which city has most number of departing flights?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "224", "plan": "SELECT T1 . city FROM airports AS T1 JOIN flights AS T2 ON T1 . airportcode = T2 . sourceairport GROUP BY T1 . city ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which city is the most frequent source airport?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "225", "plan": "SELECT T1 . airportcode FROM airports AS T1 JOIN flights AS T2 ON T1 . airportcode = T2 . destairport OR T1 . airportcode = T2 . sourceairport GROUP BY T1 . airportcode ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What is the code of airport that has the highest number of flights?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "226", "plan": "SELECT T1 . airportcode FROM airports AS T1 JOIN flights AS T2 ON T1 . airportcode = T2 . destairport OR T1 . airportcode = T2 . sourceairport GROUP BY T1 . airportcode ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What is the airport code of the airport with the most flights?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "227", "plan": "SELECT T1 . airportcode FROM airports AS T1 JOIN flights AS T2 ON T1 . airportcode = T2 . destairport OR T1 . airportcode = T2 . sourceairport GROUP BY T1 . airportcode ORDER BY count ( * ) LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What is the code of airport that has fewest number of flights?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "228", "plan": "SELECT T1 . airportcode FROM airports AS T1 JOIN flights AS T2 ON T1 . airportcode = T2 . destairport OR T1 . airportcode = T2 . sourceairport GROUP BY T1 . airportcode ORDER BY count ( * ) LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Give the code of the airport with the least flights."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "229", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline GROUP BY T1 . airline ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which airline has most number of flights?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "230", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline GROUP BY T1 . airline ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What airline serves the most flights?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "231", "plan": "SELECT T1 . abbreviation , T1 . country FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline GROUP BY T1 . airline ORDER BY count ( * ) LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Find the abbreviation and country of the airline that has fewest number of flights?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "232", "plan": "SELECT T1 . abbreviation , T1 . country FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline GROUP BY T1 . airline ORDER BY count ( * ) LIMIT 1", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What is the abbreviation of the airilne has the fewest flights and what country is it in?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "233", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . sourceairport = \"AHD\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What are airlines that have some flight departing from airport 'AHD'?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "234", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . sourceairport = \"AHD\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which airlines have a flight with source airport AHD?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "235", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . destairport = \"AHD\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What are airlines that have flights arriving at airport 'AHD'?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "236", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . destairport = \"AHD\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which airlines have a flight with destination airport AHD?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG , CVO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ,  CVO ) , destairport (  APG ,  CVO )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "237", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . sourceairport = \"APG\" INTERSECT SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . sourceairport = \"CVO\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Find all airlines that have flights from both airports 'APG' and 'CVO'."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG , CVO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ,  CVO ) , destairport (  APG ,  CVO )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "238", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . sourceairport = \"APG\" INTERSECT SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . sourceairport = \"CVO\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which airlines have departing flights from both APG and CVO airports?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG , CVO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ,  CVO ) , destairport (  APG ,  CVO )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "239", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . sourceairport = \"CVO\" EXCEPT SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . sourceairport = \"APG\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Find all airlines that have flights from airport 'CVO' but not from 'APG'."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG , CVO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ,  CVO ) , destairport (  APG ,  CVO )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "240", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . sourceairport = \"CVO\" EXCEPT SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline WHERE T2 . sourceairport = \"APG\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which airlines have departures from CVO but not from APG airports?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "241", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline GROUP BY T1 . airline HAVING count ( * ) > 10", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Find all airlines that have at least 10 flights."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "242", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline GROUP BY T1 . airline HAVING count ( * ) > 10", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which airlines have at least 10 flights?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "243", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline GROUP BY T1 . airline HAVING count ( * ) < 200", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Find all airlines that have fewer than 200 flights."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "244", "plan": "SELECT T1 . airline FROM airlines AS T1 JOIN flights AS T2 ON T1 . uid = T2 . airline GROUP BY T1 . airline HAVING count ( * ) < 200", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which airlines have less than 200 flights?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "245", "plan": "SELECT T1 . flightno FROM flights AS T1 JOIN airlines AS T2 ON T2 . uid = T1 . airline WHERE T2 . airline = \"United Airlines\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What are flight numbers of Airline \"United Airlines\"?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( United Airlines ) , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "246", "plan": "SELECT T1 . flightno FROM flights AS T1 JOIN airlines AS T2 ON T2 . uid = T1 . airline WHERE T2 . airline = \"United Airlines\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which flight numbers correspond to United Airlines flights?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "247", "plan": "SELECT flightno FROM flights WHERE sourceairport = \"APG\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What are flight numbers of flights departing from Airport \"APG\"?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "248", "plan": "SELECT flightno FROM flights WHERE sourceairport = \"APG\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Give the flight numbers of flights leaving from APG."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "249", "plan": "SELECT flightno FROM flights WHERE destairport = \"APG\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What are flight numbers of flights arriving at Airport \"APG\"?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG )", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "250", "plan": "SELECT flightno FROM flights WHERE destairport = \"APG\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Give the flight numbers of flights landing at APG."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "251", "plan": "SELECT T1 . flightno FROM flights AS T1 JOIN airports AS T2 ON T1 . sourceairport = T2 . airportcode WHERE T2 . city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What are flight numbers of flights departing from City \"Aberdeen \"?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "252", "plan": "SELECT T1 . flightno FROM flights AS T1 JOIN airports AS T2 ON T1 . sourceairport = T2 . airportcode WHERE T2 . city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Give the flight numbers of flights leaving from Aberdeen."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "253", "plan": "SELECT T1 . flightno FROM flights AS T1 JOIN airports AS T2 ON T1 . destairport = T2 . airportcode WHERE T2 . city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What are flight numbers of flights arriving at City \"Aberdeen\"?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "254", "plan": "SELECT T1 . flightno FROM flights AS T1 JOIN airports AS T2 ON T1 . destairport = T2 . airportcode WHERE T2 . city = \"Aberdeen\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Give the flight numbers of flights arriving in Aberdeen."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Abilene  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "255", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airports AS T2 ON T1 . destairport = T2 . airportcode WHERE T2 . city = \"Aberdeen\" OR T2 . city = \"Abilene\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Find the number of flights landing in the city of Aberdeen or Abilene."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Abilene  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "256", "plan": "SELECT count ( * ) FROM flights AS T1 JOIN airports AS T2 ON T1 . destairport = T2 . airportcode WHERE T2 . city = \"Aberdeen\" OR T2 . city = \"Abilene\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many flights land in Aberdeen or Abilene?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "257", "plan": "SELECT airportname FROM airports WHERE airportcode NOT IN ( SELECT sourceairport FROM flights UNION SELECT destairport FROM flights )", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Find the name of airports which do not have any flight in and out."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "258", "plan": "SELECT airportname FROM airports WHERE airportcode NOT IN ( SELECT sourceairport FROM flights UNION SELECT destairport FROM flights )", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which airports do not have departing or arriving flights?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "259", "plan": "SELECT count ( * ) FROM employee", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "How many employees are there?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "260", "plan": "SELECT count ( * ) FROM employee", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Count the number of employees"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "261", "plan": "SELECT name FROM employee ORDER BY age", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Sort employee names by their age in ascending order."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "262", "plan": "SELECT name FROM employee ORDER BY age", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "List the names of employees and sort in ascending order of age."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "263", "plan": "SELECT count ( * ) , city FROM employee GROUP BY city", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "What is the number of employees from each city?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "264", "plan": "SELECT count ( * ) , city FROM employee GROUP BY city", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Count the number of employees for each city."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "265", "plan": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count ( * ) > 1", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Which cities do more than one employee under age 30 come from?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "266", "plan": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count ( * ) > 1", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Find the cities that have more than one employee under age 30."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "267", "plan": "SELECT count ( * ) , location FROM shop GROUP BY location", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Find the number of shops in each location."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "268", "plan": "SELECT count ( * ) , location FROM shop GROUP BY location", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "How many shops are there in each location?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "269", "plan": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Find the manager name and district of the shop whose number of products is the largest."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "270", "plan": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "What are the manager name and district of the shop that sells the largest number of products?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "271", "plan": "SELECT min ( number_products ) , max ( number_products ) FROM shop", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "find the minimum and maximum number of products of all stores."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "272", "plan": "SELECT min ( number_products ) , max ( number_products ) FROM shop", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "What are the minimum and maximum number of products across all the shops?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "273", "plan": "SELECT name , location , district FROM shop ORDER BY number_products DESC", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Return the name, location and district of all shops in descending order of number of products."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "274", "plan": "SELECT name , location , district FROM shop ORDER BY number_products DESC", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Sort all the shops by number products in descending order, and return the name, location and district of each shop."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "275", "plan": "SELECT name FROM shop WHERE number_products > ( SELECT avg ( number_products ) FROM shop )", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Find the names of stores whose number products is more than the average number of products."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "276", "plan": "SELECT name FROM shop WHERE number_products > ( SELECT avg ( number_products ) FROM shop )", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Which shops' number products is above the average? Give me the shop names."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "277", "plan": "SELECT T1 . name FROM employee AS T1 JOIN evaluation AS T2 ON T1 . employee_id = T2 . employee_id GROUP BY T2 . employee_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "find the name of employee who was awarded the most times in the evaluation."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "278", "plan": "SELECT T1 . name FROM employee AS T1 JOIN evaluation AS T2 ON T1 . employee_id = T2 . employee_id GROUP BY T2 . employee_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Which employee received the most awards in evaluations? Give me the employee name."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "279", "plan": "SELECT T1 . name FROM employee AS T1 JOIN evaluation AS T2 ON T1 . employee_id = T2 . employee_id ORDER BY T2 . bonus DESC LIMIT 1", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Find the name of the employee who got the highest one time bonus."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "280", "plan": "SELECT T1 . name FROM employee AS T1 JOIN evaluation AS T2 ON T1 . employee_id = T2 . employee_id ORDER BY T2 . bonus DESC LIMIT 1", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Which employee received the biggest bonus? Give me the employee name."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "281", "plan": "SELECT name FROM employee WHERE employee_id NOT IN ( SELECT employee_id FROM evaluation )", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Find the names of employees who never won any award in the evaluation."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "282", "plan": "SELECT name FROM employee WHERE employee_id NOT IN ( SELECT employee_id FROM evaluation )", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "What are the names of the employees who never received any evaluation?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "283", "plan": "SELECT T2 . name FROM hiring AS T1 JOIN shop AS T2 ON T1 . shop_id = T2 . shop_id GROUP BY T1 . shop_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "What is the name of the shop that is hiring the largest number of employees?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "284", "plan": "SELECT T2 . name FROM hiring AS T1 JOIN shop AS T2 ON T1 . shop_id = T2 . shop_id GROUP BY T1 . shop_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Which shop has the most employees? Give me the shop name."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "285", "plan": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Find the name of the shops that do not hire any employee."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "286", "plan": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Which shops run with no employees? Find the shop names"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "287", "plan": "SELECT count ( * ) , T2 . name FROM hiring AS T1 JOIN shop AS T2 ON T1 . shop_id = T2 . shop_id GROUP BY T2 . name", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Find the number of employees hired in each shop; show the shop name as well."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "288", "plan": "SELECT count ( * ) , T2 . name FROM hiring AS T1 JOIN shop AS T2 ON T1 . shop_id = T2 . shop_id GROUP BY T2 . name", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "For each shop, return the number of employees working there and the name of the shop."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "289", "plan": "SELECT sum ( bonus ) FROM evaluation", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "What is total bonus given in all evaluations?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "290", "plan": "SELECT sum ( bonus ) FROM evaluation", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Find the total amount of bonus given in all the evaluations."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "291", "plan": "SELECT * FROM hiring", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Give me all the information about hiring."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "292", "plan": "SELECT * FROM hiring", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "What is all the information about hiring?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "293", "plan": "SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Which district has both stores with less than 3000 products and stores with more than 10000 products?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "294", "plan": "SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products."}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "295", "plan": "SELECT count ( DISTINCT location ) FROM shop", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "How many different store locations are there?"}
{"db_schema_with_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "db_schema_without_val": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus", "dialogue_id": "296", "plan": "SELECT count ( DISTINCT location ) FROM shop", "schema_name": "employee_hire_evaluation", "turn_part_index": 0, "utterance": "Count the number of distinct store locations."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "297", "plan": "SELECT count ( * ) FROM documents", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "How many documents do we have?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "298", "plan": "SELECT count ( * ) FROM documents", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Count the number of documents."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "299", "plan": "SELECT document_id , document_name , document_description FROM documents", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "List document IDs, document names, and document descriptions for all documents."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "300", "plan": "SELECT document_id , document_name , document_description FROM documents", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the ids, names, and descriptions for all documents?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "301", "plan": "SELECT document_name , template_id FROM documents WHERE document_description LIKE \"%w%\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the document name and template id for document with description with the letter 'w' in it?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "302", "plan": "SELECT document_name , template_id FROM documents WHERE document_description LIKE \"%w%\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the names and template ids for documents that contain the letter w in their description."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Robbin CV ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "303", "plan": "SELECT document_id , template_id , document_description FROM documents WHERE document_name = \"Robbin CV\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the document id, template id and description for document named \"Robbin CV\"?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Robbin CV ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "304", "plan": "SELECT document_id , template_id , document_description FROM documents WHERE document_name = \"Robbin CV\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the document id, template id, and description for the document with the name Robbin CV."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "305", "plan": "SELECT count ( DISTINCT template_id ) FROM documents", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "How many different templates do all document use?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "306", "plan": "SELECT count ( DISTINCT template_id ) FROM documents", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Count the number of different templates used for documents."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "307", "plan": "SELECT count ( * ) FROM documents AS T1 JOIN templates AS T2 ON T1 . template_id = T2 . template_id WHERE T2 . template_type_code = 'PPT'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "How many documents are using the template with type code 'PPT'?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "308", "plan": "SELECT count ( * ) FROM documents AS T1 JOIN templates AS T2 ON T1 . template_id = T2 . template_id WHERE T2 . template_type_code = 'PPT'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Count the number of documents that use the PPT template type."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "309", "plan": "SELECT template_id , count ( * ) FROM documents GROUP BY template_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all template ids and number of documents using each template."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "310", "plan": "SELECT template_id , count ( * ) FROM documents GROUP BY template_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are all different template ids used for documents, and how many times were each of them used?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "311", "plan": "SELECT T1 . template_id , T2 . template_type_code FROM documents AS T1 JOIN templates AS T2 ON T1 . template_id = T2 . template_id GROUP BY T1 . template_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the id and type code for the template used by the most documents?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "312", "plan": "SELECT T1 . template_id , T2 . template_type_code FROM documents AS T1 JOIN templates AS T2 ON T1 . template_id = T2 . template_id GROUP BY T1 . template_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the id and type code of the template that is used for the greatest number of documents."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "313", "plan": "SELECT template_id FROM documents GROUP BY template_id HAVING count ( * ) > 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show ids for all templates that are used by more than one document."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "314", "plan": "SELECT template_id FROM documents GROUP BY template_id HAVING count ( * ) > 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the template ids of any templates used in more than a single document?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "315", "plan": "SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show ids for all templates not used by any document."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "316", "plan": "SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the ids for templates that are not used in any documents?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "317", "plan": "SELECT count ( * ) FROM templates", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "How many templates do we have?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "318", "plan": "SELECT count ( * ) FROM templates", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Count the number of templates."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "319", "plan": "SELECT template_id , version_number , template_type_code FROM templates", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show template ids, version numbers, and template type codes for all templates."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "320", "plan": "SELECT template_id , version_number , template_type_code FROM templates", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the ids, version numbers, and type codes for each template?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "321", "plan": "SELECT DISTINCT template_type_code FROM templates", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all distinct template type codes for all templates."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "322", "plan": "SELECT DISTINCT template_type_code FROM templates", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the different template type codes?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT , PP ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT , PP ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "323", "plan": "SELECT template_id FROM templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the ids of templates with template type code PP or PPT?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT , PP ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT , PP ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "324", "plan": "SELECT template_id FROM templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the ids of templates that have the code PP or PPT."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "325", "plan": "SELECT count ( * ) FROM templates WHERE template_type_code = \"CV\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "How many templates have template type code CV?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "326", "plan": "SELECT count ( * ) FROM templates WHERE template_type_code = \"CV\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Count the number of templates of the type CV."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "327", "plan": "SELECT version_number , template_type_code FROM templates WHERE version_number > 5", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the version number and template type code for the template with version number later than 5?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "328", "plan": "SELECT version_number , template_type_code FROM templates WHERE version_number > 5", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the version numbers and template type codes of templates with a version number greater than 5."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "329", "plan": "SELECT template_type_code , count ( * ) FROM templates GROUP BY template_type_code", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all template type codes and number of templates for each."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "330", "plan": "SELECT template_type_code , count ( * ) FROM templates GROUP BY template_type_code", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the different template type codes, and how many templates correspond to each?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "331", "plan": "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Which template type code has most number of templates?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "332", "plan": "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the type code of the template type that the most templates belong to."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "333", "plan": "SELECT template_type_code FROM templates GROUP BY template_type_code HAVING count ( * ) < 3", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all template type codes with less than three templates."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "334", "plan": "SELECT template_type_code FROM templates GROUP BY template_type_code HAVING count ( * ) < 3", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the codes of template types that have fewer than 3 templates?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "335", "plan": "SELECT min ( version_number ) , template_type_code FROM templates", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What the smallest version number and its template type code?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "336", "plan": "SELECT min ( version_number ) , template_type_code FROM templates", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the lowest version number, along with its corresponding template type code."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Data base ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "337", "plan": "SELECT T1 . template_type_code FROM templates AS T1 JOIN documents AS T2 ON T1 . template_id = T2 . template_id WHERE T2 . document_name = \"Data base\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the template type code of the template used by document with the name \"Data base\"?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Data base ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "338", "plan": "SELECT T1 . template_type_code FROM templates AS T1 JOIN documents AS T2 ON T1 . template_id = T2 . template_id WHERE T2 . document_name = \"Data base\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the template type code of the template that is used by a document named Data base."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ) , template_type_description | templates : template_id , version_number , template_type_code ( BK ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "339", "plan": "SELECT T2 . document_name FROM templates AS T1 JOIN documents AS T2 ON T1 . template_id = T2 . template_id WHERE T1 . template_type_code = \"BK\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all document names using templates with template type code BK."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ) , template_type_description | templates : template_id , version_number , template_type_code ( BK ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "340", "plan": "SELECT T2 . document_name FROM templates AS T1 JOIN documents AS T2 ON T1 . template_id = T2 . template_id WHERE T1 . template_type_code = \"BK\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the names of documents that use templates with the code BK?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "341", "plan": "SELECT T1 . template_type_code , count ( * ) FROM templates AS T1 JOIN documents AS T2 ON T1 . template_id = T2 . template_id GROUP BY T1 . template_type_code", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all template type codes and the number of documents using each type."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "342", "plan": "SELECT T1 . template_type_code , count ( * ) FROM templates AS T1 JOIN documents AS T2 ON T1 . template_id = T2 . template_id GROUP BY T1 . template_type_code", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the different template type codes, and how many documents use each type?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "343", "plan": "SELECT T1 . template_type_code FROM templates AS T1 JOIN documents AS T2 ON T1 . template_id = T2 . template_id GROUP BY T1 . template_type_code ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Which template type code is used by most number of documents?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "344", "plan": "SELECT T1 . template_type_code FROM templates AS T1 JOIN documents AS T2 ON T1 . template_id = T2 . template_id GROUP BY T1 . template_type_code ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the code of the template type that is most commonly used in documents."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "345", "plan": "SELECT template_type_code FROM templates EXCEPT SELECT template_type_code FROM templates AS T1 JOIN documents AS T2 ON T1 . template_id = T2 . template_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all template type codes that are not used by any document."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "346", "plan": "SELECT template_type_code FROM templates EXCEPT SELECT template_type_code FROM templates AS T1 JOIN documents AS T2 ON T1 . template_id = T2 . template_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the codes of template types that are not used for any document?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "347", "plan": "SELECT template_type_code , template_type_description FROM ref_template_types", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all template type codes and descriptions."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "348", "plan": "SELECT template_type_code , template_type_description FROM ref_template_types", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the type codes and descriptions for all template types?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ) , template_type_description | templates : template_id , version_number , template_type_code ( AD ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "349", "plan": "SELECT template_type_description FROM ref_template_types WHERE template_type_code = \"AD\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the template type descriptions for template type code \"AD\"."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ) , template_type_description | templates : template_id , version_number , template_type_code ( AD ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "350", "plan": "SELECT template_type_description FROM ref_template_types WHERE template_type_code = \"AD\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the template type description of the template type with the code AD."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Book ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "351", "plan": "SELECT template_type_code FROM ref_template_types WHERE template_type_description = \"Book\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the template type code for template type description \"Book\"."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Book ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "352", "plan": "SELECT template_type_code FROM ref_template_types WHERE template_type_description = \"Book\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the type code of the template type with the description \"Book\"."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "353", "plan": "SELECT DISTINCT T1 . template_type_description FROM ref_template_types AS T1 JOIN templates AS T2 ON T1 . template_type_code = T2 . template_type_code JOIN documents AS T3 ON T2 . template_id = T3 . template_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the distinct template type descriptions for the templates ever used by any document?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "354", "plan": "SELECT DISTINCT T1 . template_type_description FROM ref_template_types AS T1 JOIN templates AS T2 ON T1 . template_type_code = T2 . template_type_code JOIN documents AS T3 ON T2 . template_id = T3 . template_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the different descriptions for templates that have been used in a document."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Presentation ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "355", "plan": "SELECT T2 . template_id FROM ref_template_types AS T1 JOIN templates AS T2 ON T1 . template_type_code = T2 . template_type_code WHERE T1 . template_type_description = \"Presentation\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the template ids with template type description \"Presentation\"."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description ( Presentation ) | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "356", "plan": "SELECT T2 . template_id FROM ref_template_types AS T1 JOIN templates AS T2 ON T1 . template_type_code = T2 . template_type_code WHERE T1 . template_type_description = \"Presentation\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the ids corresponding to templates with the description 'Presentation'."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "357", "plan": "SELECT count ( * ) FROM paragraphs", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "How many paragraphs in total?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "358", "plan": "SELECT count ( * ) FROM paragraphs", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Count the number of paragraphs."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Summer Show ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "359", "plan": "SELECT count ( * ) FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id WHERE T2 . document_name = 'Summer Show'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "How many paragraphs for the document with name 'Summer Show'?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Summer Show ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "360", "plan": "SELECT count ( * ) FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id WHERE T2 . document_name = 'Summer Show'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Count the number of paragraphs in the document named 'Summer Show'."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text ( Korea ) , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "361", "plan": "SELECT other_details FROM paragraphs WHERE paragraph_text LIKE 'korea'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show paragraph details for paragraph with text 'Korea ' ."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text ( Korea ) , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "362", "plan": "SELECT other_details FROM paragraphs WHERE paragraph_text LIKE 'korea'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the details for the paragraph that includes the text 'Korea ' ?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Welcome to NY ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "363", "plan": "SELECT T1 . paragraph_id , T1 . paragraph_text FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id WHERE T2 . document_name = 'Welcome to NY'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all paragraph ids and texts for the document with name 'Welcome to NY'."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Welcome to NY ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "364", "plan": "SELECT T1 . paragraph_id , T1 . paragraph_text FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id WHERE T2 . document_name = 'Welcome to NY'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Customer reviews ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "365", "plan": "SELECT T1 . paragraph_text FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id WHERE T2 . document_name = \"Customer reviews\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all paragraph texts for the document \"Customer reviews\"."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Customer reviews ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "366", "plan": "SELECT T1 . paragraph_text FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id WHERE T2 . document_name = \"Customer reviews\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the paragraph texts for the document with the name 'Customer reviews'?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "367", "plan": "SELECT document_id , count ( * ) FROM paragraphs GROUP BY document_id ORDER BY document_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all document ids and the number of paragraphs in each document. Order by document id."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "368", "plan": "SELECT document_id , count ( * ) FROM paragraphs GROUP BY document_id ORDER BY document_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "369", "plan": "SELECT T1 . document_id , T2 . document_name , count ( * ) FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id GROUP BY T1 . document_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all document ids, names and the number of paragraphs in each document."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "370", "plan": "SELECT T1 . document_id , T2 . document_name , count ( * ) FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id GROUP BY T1 . document_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the ids and names of each document, as well as the number of paragraphs in each?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "371", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count ( * ) >= 2", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "List all document ids with at least two paragraphs."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "372", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count ( * ) >= 2", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the ids of documents that have 2 or more paragraphs?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "373", "plan": "SELECT T1 . document_id , T2 . document_name FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id GROUP BY T1 . document_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the document id and name with greatest number of paragraphs?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "374", "plan": "SELECT T1 . document_id , T2 . document_name FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id GROUP BY T1 . document_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the id and name of the document with the most paragraphs."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "375", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count ( * ) ASC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the document id with least number of paragraphs?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "376", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count ( * ) ASC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the id of the document with the fewest paragraphs."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "377", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count ( * ) BETWEEN 1 AND 2", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the document id with 1 to 2 paragraphs?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "378", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count ( * ) BETWEEN 1 AND 2", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Give the ids of documents that have between one and two paragraphs."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text ( Ireland , Brazil ) , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "379", "plan": "SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show the document id with paragraph text 'Brazil' and 'Ireland'."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text ( Ireland , Brazil ) , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "380", "plan": "SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "381", "plan": "SELECT count ( * ) FROM teacher", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "How many teachers are there?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "382", "plan": "SELECT count ( * ) FROM teacher", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What is the total count of teachers?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "383", "plan": "SELECT name FROM teacher ORDER BY age ASC", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "List the names of teachers in ascending order of age."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "384", "plan": "SELECT name FROM teacher ORDER BY age ASC", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers ordered by ascending age?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "385", "plan": "SELECT age , hometown FROM teacher", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the age and hometown of teachers?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "386", "plan": "SELECT age , hometown FROM teacher", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What is the age and hometown of every teacher?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "387", "plan": "SELECT name FROM teacher WHERE hometown != \"little lever urban district\"", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "List the name of teachers whose hometown is not `` Little Lever Urban District '' ."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "388", "plan": "SELECT name FROM teacher WHERE hometown != \"little lever urban district\"", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "389", "plan": "SELECT name FROM teacher WHERE age = 32 OR age = 33", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show the name of teachers aged either 32 or 33?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "390", "plan": "SELECT name FROM teacher WHERE age = 32 OR age = 33", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers who are aged either 32 or 33?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "391", "plan": "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What is the hometown of the youngest teacher?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "392", "plan": "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Where is the youngest teacher from?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "393", "plan": "SELECT hometown , count ( * ) FROM teacher GROUP BY hometown", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show different hometown of teachers and the number of teachers from each hometown."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "394", "plan": "SELECT hometown , count ( * ) FROM teacher GROUP BY hometown", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "For each hometown, how many teachers are there?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "395", "plan": "SELECT hometown FROM teacher GROUP BY hometown ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "List the most common hometown of teachers."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "396", "plan": "SELECT hometown FROM teacher GROUP BY hometown ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What is the most commmon hometowns for teachers?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "397", "plan": "SELECT hometown FROM teacher GROUP BY hometown HAVING count ( * ) >= 2", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show the hometowns shared by at least two teachers."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "398", "plan": "SELECT hometown FROM teacher GROUP BY hometown HAVING count ( * ) >= 2", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the towns from which at least two teachers come from?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "399", "plan": "SELECT T3 . name , T2 . course FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show names of teachers and the courses they are arranged to teach."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "400", "plan": "SELECT T3 . name , T2 . course FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What is the name of each teacher and what course they teach?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "401", "plan": "SELECT T3 . name , T2 . course FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id ORDER BY T3 . name", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "402", "plan": "SELECT T3 . name , T2 . course FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id ORDER BY T3 . name", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course ( Math ) | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "403", "plan": "SELECT T3 . name FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id WHERE T2 . course = \"Math\"", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show the name of the teacher for the math course."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course ( Math ) | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "404", "plan": "SELECT T3 . name FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id WHERE T2 . course = \"Math\"", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the people who teach math courses?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "405", "plan": "SELECT T2 . name , count ( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1 . teacher_id = T2 . teacher_id GROUP BY T2 . name", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show names of teachers and the number of courses they teach."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "406", "plan": "SELECT T2 . name , count ( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1 . teacher_id = T2 . teacher_id GROUP BY T2 . name", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers and how many courses do they teach?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "407", "plan": "SELECT T2 . name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1 . teacher_id = T2 . teacher_id GROUP BY T2 . name HAVING count ( * ) >= 2", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show names of teachers that teach at least two courses."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "408", "plan": "SELECT T2 . name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1 . teacher_id = T2 . teacher_id GROUP BY T2 . name HAVING count ( * ) >= 2", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers who teach at least two courses?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "409", "plan": "SELECT name FROM teacher WHERE teacher_id NOT IN ( SELECT teacher_id FROM course_arrange )", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "List the names of teachers who have not been arranged to teach courses."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "410", "plan": "SELECT name FROM teacher WHERE teacher_id NOT IN ( SELECT teacher_id FROM course_arrange )", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers whose courses have not been arranged?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "411", "plan": "SELECT count ( * ) FROM visitor WHERE age < 30", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "How many visitors below age 30 are there?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "412", "plan": "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "413", "plan": "SELECT avg ( age ) FROM visitor WHERE level_of_membership <= 4", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What is the average age of the visitors whose membership level is not higher than 4?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "414", "plan": "SELECT name , level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "415", "plan": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the id and name of the museum that has the most staff members?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "416", "plan": "SELECT avg ( num_of_staff ) FROM museum WHERE open_year < 2009", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the average number of staff working for the museums that were open before 2009."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name ( Plaza Museum ) , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "417", "plan": "SELECT num_of_staff , open_year FROM museum WHERE name = 'Plaza Museum'", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What are the opening year and staff number of the museum named Plaza Museum?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "418", "plan": "SELECT name FROM museum WHERE num_of_staff > ( SELECT min ( num_of_staff ) FROM museum WHERE open_year > 2010 )", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "419", "plan": "SELECT T1 . id , T1 . name , T1 . age FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id GROUP BY T1 . id HAVING count ( * ) > 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "find the id, name and age for visitors who visited some museums more than once."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "420", "plan": "SELECT T2 . visitor_id , T1 . name , T1 . level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id GROUP BY T2 . visitor_id ORDER BY sum ( T2 . total_spent ) DESC LIMIT 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "421", "plan": "SELECT T2 . museum_id , T1 . name FROM museum AS T1 JOIN visit AS T2 ON T1 . museum_id = T2 . museum_id GROUP BY T2 . museum_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What are the id and name of the museum visited most times?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "422", "plan": "SELECT name FROM museum WHERE museum_id NOT IN ( SELECT museum_id FROM visit )", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What is the name of the museum that had no visitor yet?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "423", "plan": "SELECT T1 . name , T1 . age FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id ORDER BY T2 . num_of_ticket DESC LIMIT 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the name and age of the visitor who bought the most tickets at once."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "424", "plan": "SELECT avg ( num_of_ticket ) , max ( num_of_ticket ) FROM visit", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What are the average and maximum number of tickets bought in all visits?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "425", "plan": "SELECT sum ( T2 . total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id WHERE T1 . level_of_membership = 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What is the total ticket expense of the visitors whose membership level is 1?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "426", "plan": "SELECT T1 . name FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id JOIN museum AS T3 ON T3 . museum_id = T2 . museum_id WHERE T3 . open_year < 2009 INTERSECT SELECT T1 . name FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id JOIN museum AS T3 ON T3 . museum_id = T2 . museum_id WHERE T3 . open_year > 2011", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "427", "plan": "SELECT count ( * ) FROM visitor WHERE id NOT IN ( SELECT T2 . visitor_id FROM museum AS T1 JOIN visit AS T2 ON T1 . museum_id = T2 . museum_id WHERE T1 . open_year > 2010 )", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the number of visitors who did not visit any museum opened after 2010."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "428", "plan": "SELECT count ( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "How many museums were opened after 2013 or before 2008?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "429", "plan": "SELECT count ( * ) FROM players", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the total number of players."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "430", "plan": "SELECT count ( * ) FROM players", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many players are there?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "431", "plan": "SELECT count ( * ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the total number of matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "432", "plan": "SELECT count ( * ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Count the number of matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code ( USA ) | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc ( USA ) , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc ( USA ) , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "433", "plan": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "List the first name and birth date of all players from the country with code USA."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code ( USA ) | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc ( USA ) , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc ( USA ) , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "434", "plan": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the first names and birth dates of players from the USA?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "435", "plan": "SELECT avg ( loser_age ) , avg ( winner_age ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the average age of losers and winners of all matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "436", "plan": "SELECT avg ( loser_age ) , avg ( winner_age ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the average ages of losers and winners across matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "437", "plan": "SELECT avg ( winner_rank ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the average rank of winners in all matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "438", "plan": "SELECT avg ( winner_rank ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the average rank for winners in all matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "439", "plan": "SELECT min ( loser_rank ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the highest rank of losers in all matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "440", "plan": "SELECT min ( loser_rank ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the best rank of losers across all matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "441", "plan": "SELECT count ( DISTINCT country_code ) FROM players", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "find the number of distinct country codes of all players."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "442", "plan": "SELECT count ( DISTINCT country_code ) FROM players", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many distinct countries do players come from?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "443", "plan": "SELECT count ( DISTINCT loser_name ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the number of distinct name of losers."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "444", "plan": "SELECT count ( DISTINCT loser_name ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many different loser names are there?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "445", "plan": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * ) > 10", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the name of tourney that has more than 10 matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "446", "plan": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * ) > 10", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the names of tournaments that have more than 10 matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "447", "plan": "SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "List the names of all winners who played in both 2013 and 2016."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "448", "plan": "SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the names of players who won in both 2013 and 2016?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "449", "plan": "SELECT count ( * ) FROM matches WHERE year = 2013 OR year = 2016", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "List the number of all matches who played in years of 2013 or 2016."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "450", "plan": "SELECT count ( * ) FROM matches WHERE year = 2013 OR year = 2016", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many matches were played in 2013 or 2016?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( WTA Championships , Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "451", "plan": "SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN matches AS T2 ON T1 . player_id = T2 . winner_id WHERE T2 . tourney_name = 'WTA Championships' INTERSECT SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN matches AS T2 ON T1 . player_id = T2 . winner_id WHERE T2 . tourney_name = 'Australian Open'", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( WTA Championships , Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "452", "plan": "SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN matches AS T2 ON T1 . player_id = T2 . winner_id WHERE T2 . tourney_name = 'WTA Championships' INTERSECT SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN matches AS T2 ON T1 . player_id = T2 . winner_id WHERE T2 . tourney_name = 'Australian Open'", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "453", "plan": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the first name and country code of the oldest player."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "454", "plan": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the first name and country code of the oldest player?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date , Last ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "455", "plan": "SELECT first_name , last_name FROM players ORDER BY birth_date", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "List the first and last name of all players in the order of birth date."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "456", "plan": "SELECT first_name , last_name FROM players ORDER BY birth_date", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the full names of all players, sorted by birth date?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date , Last ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "457", "plan": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "List the first and last name of all players who are left / L hand in the order of birth date."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "458", "plan": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the full names of all left handed players, in order of birth date?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "459", "plan": "SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id ORDER BY T2 . tours DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the first name and country code of the player who did the most number of tours."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "460", "plan": "SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id ORDER BY T2 . tours DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the first name and country code of the player with the most tours?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "461", "plan": "SELECT year FROM matches GROUP BY year ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the year that has the most number of matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "462", "plan": "SELECT year FROM matches GROUP BY year ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Which year had the most matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "463", "plan": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the name and rank points of the winner who won the most times."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "464", "plan": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the name of the winner who has won the most matches, and how many rank points does this player have?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "465", "plan": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "466", "plan": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "467", "plan": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "find the names of loser and winner who played in the match with greatest number of minutes."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "468", "plan": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the names of the winner and loser who played in the longest match?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "469", "plan": "SELECT avg ( ranking ) , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id GROUP BY T1 . first_name", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the average ranking for each player and their first name."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "470", "plan": "SELECT avg ( ranking ) , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id GROUP BY T1 . first_name", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the first names of all players, and their average rankings?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "471", "plan": "SELECT sum ( ranking_points ) , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id GROUP BY T1 . first_name", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the total ranking points for each player and their first name."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "472", "plan": "SELECT sum ( ranking_points ) , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id GROUP BY T1 . first_name", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the first names of all players, and their total ranking points?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "473", "plan": "SELECT count ( * ) , country_code FROM players GROUP BY country_code", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "find the number of players for each country."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "474", "plan": "SELECT count ( * ) , country_code FROM players GROUP BY country_code", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many players are from each country?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "475", "plan": "SELECT country_code FROM players GROUP BY country_code ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "find the code of the country where has the greatest number of players."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "476", "plan": "SELECT country_code FROM players GROUP BY country_code ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the code of the country with the most players?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "477", "plan": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * ) > 50", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the codes of countries that have more than 50 players."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "478", "plan": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * ) > 50", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the codes of countries with more than 50 players?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "479", "plan": "SELECT sum ( tours ) , ranking_date FROM rankings GROUP BY ranking_date", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the total number of tours for each ranking date."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "480", "plan": "SELECT sum ( tours ) , ranking_date FROM rankings GROUP BY ranking_date", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many total tours were there for each ranking date?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "481", "plan": "SELECT count ( * ) , year FROM matches GROUP BY year", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the number of matches happened in each year."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "482", "plan": "SELECT count ( * ) , year FROM matches GROUP BY year", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many matches were played in each year?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "483", "plan": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the name and rank of the 3 youngest winners across all matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "484", "plan": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the names and ranks of the three youngest winners across all matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( WTA Championships ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "485", "plan": "SELECT count ( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many different winners both participated in the WTA Championships and were left handed?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( WTA Championships ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "486", "plan": "SELECT count ( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the number of left handed winners who participated in the WTA Championships."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "487", "plan": "SELECT T1 . first_name , T1 . country_code , T1 . birth_date FROM players AS T1 JOIN matches AS T2 ON T1 . player_id = T2 . winner_id ORDER BY T2 . winner_rank_points DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "488", "plan": "SELECT T1 . first_name , T1 . country_code , T1 . birth_date FROM players AS T1 JOIN matches AS T2 ON T1 . player_id = T2 . winner_id ORDER BY T2 . winner_rank_points DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "489", "plan": "SELECT count ( * ) , hand FROM players GROUP BY hand", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the number of players for each hand type."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "490", "plan": "SELECT count ( * ) , hand FROM players GROUP BY hand", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many players are there for each hand type?"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship ( Captured ) | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "491", "plan": "SELECT count ( * ) FROM ship WHERE disposition_of_ship = 'Captured'", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "How many ships ended up being 'Captured'?"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "492", "plan": "SELECT name , tonnage FROM ship ORDER BY name DESC", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "List the name and tonnage ordered by in descending alphaetical order for the names."}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "493", "plan": "SELECT name , date FROM battle", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "List the name, date and result of each battle."}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "494", "plan": "SELECT max ( killed ) , min ( killed ) FROM death", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "What is maximum and minimum death toll caused each time?"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "495", "plan": "SELECT avg ( injured ) FROM death", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "What is the average number of injuries caused each time?"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "496", "plan": "SELECT T1 . killed , T1 . injured FROM death AS T1 JOIN ship AS T2 ON T1 . caused_by_ship_id = T2 . id WHERE T2 . tonnage = 't'", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "What are the death and injury situations caused by the ship with tonnage 't'?"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander ( Boril ) , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "497", "plan": "SELECT name , result FROM battle WHERE bulgarian_commander != 'Boril'", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "What are the name and results of the battles when the bulgarian commander is not 'Boril'"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type ( Brig ) , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "498", "plan": "SELECT DISTINCT T1 . id , T1 . name FROM battle AS T1 JOIN ship AS T2 ON T1 . id = T2 . lost_in_battle WHERE T2 . ship_type = 'Brig'", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "What are the different ids and names of the battles that lost any 'Brig' type shipes?"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "499", "plan": "SELECT T1 . id , T1 . name FROM battle AS T1 JOIN ship AS T2 ON T1 . id = T2 . lost_in_battle JOIN death AS T3 ON T2 . id = T3 . caused_by_ship_id GROUP BY T1 . id HAVING sum ( T3 . killed ) > 10", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "What are the ids and names of the battles that led to more than 10 people killed in total."}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "500", "plan": "SELECT T2 . id , T2 . name FROM death AS T1 JOIN ship AS T2 ON T1 . caused_by_ship_id = T2 . id GROUP BY T2 . id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "What is the ship id and name that caused most total injuries?"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander ( Kaloyan ) , latin_commander ( Baldwin I ) , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "501", "plan": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "502", "plan": "SELECT count ( DISTINCT result ) FROM battle", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "How many different results are there for the battles?"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "503", "plan": "SELECT count ( * ) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' ) ; ", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "How many battles did not lose any ship with tonnage '225'?"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name ( HMS Atalanta , Lettice ) , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "504", "plan": "SELECT T1 . name , T1 . date FROM battle AS T1 JOIN ship AS T2 ON T1 . id = T2 . lost_in_battle WHERE T2 . name = 'Lettice' INTERSECT SELECT T1 . name , T1 . date FROM battle AS T1 JOIN ship AS T2 ON T1 . id = T2 . lost_in_battle WHERE T2 . name = 'HMS Atalanta'", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'"}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location ( English Channel ) , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "505", "plan": "SELECT name , result , bulgarian_commander FROM battle EXCEPT SELECT T1 . name , T1 . result , T1 . bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1 . id = T2 . lost_in_battle WHERE T2 . location = 'English Channel'", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'."}
{"db_schema_with_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "db_schema_without_val": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured", "dialogue_id": "506", "plan": "SELECT note FROM death WHERE note LIKE '%East%'", "schema_name": "battle_death", "turn_part_index": 0, "utterance": "What are the notes of the death events which has substring 'East'?"}
{"db_schema_with_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "db_schema_without_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "dialogue_id": "507", "plan": "SELECT line_1 , line_2 FROM addresses", "schema_name": "student_transcripts_tracking", "turn_part_index": 0, "utterance": "what are all the addresses including line 1 and line 2?"}
{"db_schema_with_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "db_schema_without_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "dialogue_id": "508", "plan": "SELECT line_1 , line_2 FROM addresses", "schema_name": "student_transcripts_tracking", "turn_part_index": 0, "utterance": "What is the first and second line for all addresses?"}
{"db_schema_with_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "db_schema_without_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "dialogue_id": "509", "plan": "SELECT count ( * ) FROM courses", "schema_name": "student_transcripts_tracking", "turn_part_index": 0, "utterance": "How many courses in total are listed?"}
{"db_schema_with_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "db_schema_without_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "dialogue_id": "510", "plan": "SELECT count ( * ) FROM courses", "schema_name": "student_transcripts_tracking", "turn_part_index": 0, "utterance": "How many courses are there?"}
{"db_schema_with_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name ( math ) , course_description , other_details | departments : department_id , department_name ( math ) , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "db_schema_without_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "dialogue_id": "511", "plan": "SELECT course_description FROM courses WHERE course_name = 'math'", "schema_name": "student_transcripts_tracking", "turn_part_index": 0, "utterance": "How is the math course described?"}
{"db_schema_with_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name ( math ) , course_description , other_details | departments : department_id , department_name ( math ) , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "db_schema_without_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "dialogue_id": "512", "plan": "SELECT course_description FROM courses WHERE course_name = 'math'", "schema_name": "student_transcripts_tracking", "turn_part_index": 0, "utterance": "What are the descriptions for all the math courses?"}
{"db_schema_with_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city ( Port Chelsea ) , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "db_schema_without_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "dialogue_id": "513", "plan": "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'", "schema_name": "student_transcripts_tracking", "turn_part_index": 0, "utterance": "What is the zip code of the address in the city Port Chelsea?"}
{"db_schema_with_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city ( Port Chelsea ) , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "db_schema_without_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "dialogue_id": "514", "plan": "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'", "schema_name": "student_transcripts_tracking", "turn_part_index": 0, "utterance": "What is the zip code for Port Chelsea?"}
{"db_schema_with_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "db_schema_without_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "dialogue_id": "515", "plan": "SELECT T2 . department_name , T1 . department_id FROM degree_programs AS T1 JOIN departments AS T2 ON T1 . department_id = T2 . department_id GROUP BY T1 . department_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "student_transcripts_tracking", "turn_part_index": 0, "utterance": "Which department offers the most number of degrees? List department name and id."}
{"db_schema_with_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "db_schema_without_val": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id", "dialogue_id": "516", "plan": "SELECT T2 . department_name , T1 . department_id FROM degree_programs AS T1 JOIN departments AS T2 ON T1 . department_id = T2 . department_id GROUP BY T1 . department_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "student_transcripts_tracking", "turn_part_index": 0, "utterance": "What is the name and id of the department with the most number of degrees ?"}
