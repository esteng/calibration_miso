{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "797", "plan": "SELECT sum ( population ) , governmentform FROM country GROUP BY governmentform HAVING avg ( lifeexpectancy ) > 72", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "798", "plan": "SELECT sum ( population ) , avg ( lifeexpectancy ) , continent FROM country GROUP BY continent HAVING avg ( lifeexpectancy ) < 72", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "799", "plan": "SELECT sum ( population ) , avg ( lifeexpectancy ) , continent FROM country GROUP BY continent HAVING avg ( lifeexpectancy ) < 72", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "800", "plan": "SELECT name , surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What are the names and areas of countries with the top 5 largest area?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "801", "plan": "SELECT name , surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Return the names and surface areas of the 5 largest countries."}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "802", "plan": "SELECT name FROM country ORDER BY population DESC LIMIT 3", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What are names of countries with the top 3 largest population?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "803", "plan": "SELECT name FROM country ORDER BY population DESC LIMIT 3", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Return the names of the 3 most populated countries."}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "804", "plan": "SELECT name FROM country ORDER BY population ASC LIMIT 3", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What are the names of the nations with the 3 lowest populations?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "805", "plan": "SELECT name FROM country ORDER BY population ASC LIMIT 3", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Return the names of the 3 countries with the fewest people."}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "806", "plan": "SELECT count ( * ) FROM country WHERE continent = \"Asia\"", "schema_name": "world_1", "turn_part_index": 0, "utterance": "how many countries are in Asia?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "807", "plan": "SELECT count ( * ) FROM country WHERE continent = \"Asia\"", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Count the number of countries in Asia."}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Europe ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "808", "plan": "SELECT name FROM country WHERE continent = \"Europe\" AND population = \"80000\"", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What are the names of the countries that are in the continent of Europe and have a population of 80000?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Europe ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "809", "plan": "SELECT name FROM country WHERE continent = \"Europe\" AND population = \"80000\"", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Give the names of countries that are in Europe and have a population equal to 80000."}
{"db_schema_with_val": " | world_1 | city : id , name ( Americana ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( North America ) , region ( North America ) , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "810", "plan": "SELECT sum ( population ) , avg ( surfacearea ) FROM country WHERE continent = \"north america\" AND surfacearea > 3000", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?"}
{"db_schema_with_val": " | world_1 | city : id , name ( Americana ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( North America ) , region ( North America ) , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "811", "plan": "SELECT sum ( population ) , avg ( surfacearea ) FROM country WHERE continent = \"north america\" AND surfacearea > 3000", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 ."}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "812", "plan": "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What are the cities whose population is between 160000 and 900000?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "813", "plan": "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Return the names of cities that have a population between 160000 and 900000 ."}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "814", "plan": "SELECT language FROM countrylanguage GROUP BY language ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Which language is spoken by the largest number of countries?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "815", "plan": "SELECT language FROM countrylanguage GROUP BY language ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Give the language that is spoken in the most countries."}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "816", "plan": "SELECT language , countrycode , max ( percentage ) FROM countrylanguage GROUP BY countrycode", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What is the language spoken by the largest percentage of people in each country?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "817", "plan": "SELECT language , countrycode , max ( percentage ) FROM countrylanguage GROUP BY countrycode", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( Spanish ) , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "818", "plan": "SELECT count ( * ) , max ( percentage ) FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What is the total number of countries where Spanish is spoken by the largest percentage of people?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( Spanish ) , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "819", "plan": "SELECT count ( * ) , max ( percentage ) FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Count the number of countries for which Spanish is the predominantly spoken language."}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( Spanish ) , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "820", "plan": "SELECT countrycode , max ( percentage ) FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode", "schema_name": "world_1", "turn_part_index": 0, "utterance": "What are the codes of countries where Spanish is spoken by the largest percentage of people?"}
{"db_schema_with_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( Spanish ) , isofficial , percentage", "db_schema_without_val": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage", "dialogue_id": "821", "plan": "SELECT countrycode , max ( percentage ) FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode", "schema_name": "world_1", "turn_part_index": 0, "utterance": "Return the codes of countries for which Spanish is the predominantly spoken language."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "822", "plan": "SELECT count ( * ) FROM conductor", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "How many conductors are there?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "823", "plan": "SELECT count ( * ) FROM conductor", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Count the number of conductors."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "824", "plan": "SELECT name FROM conductor ORDER BY age ASC", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "List the names of conductors in ascending order of age."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "825", "plan": "SELECT name FROM conductor ORDER BY age ASC", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the names of conductors, ordered by age?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality ( USA ) , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "826", "plan": "SELECT name FROM conductor WHERE nationality != 'USA'", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the names of conductors whose nationalities are not \"USA\"?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality ( USA ) , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "827", "plan": "SELECT name FROM conductor WHERE nationality != 'USA'", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Return the names of conductors that do not have the nationality \"USA\"."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "828", "plan": "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the record companies of orchestras in descending order of years in which they were founded?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "829", "plan": "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Return the record companies of orchestras, sorted descending by the years in which they were founded."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "830", "plan": "SELECT avg ( attendance ) FROM show", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What is the average attendance of shows?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "831", "plan": "SELECT avg ( attendance ) FROM show", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Return the average attendance across all shows."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type ( Live final ) , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "832", "plan": "SELECT max ( share ) , min ( share ) FROM performance WHERE type != \"Live final\"", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the maximum and minimum share of performances whose type is not \"Live final\"."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type ( Live final ) , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "833", "plan": "SELECT max ( share ) , min ( share ) FROM performance WHERE type != \"Live final\"", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Return the maximum and minimum shares for performances that do not have the type \"Live final\"."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "834", "plan": "SELECT count ( DISTINCT nationality ) FROM conductor", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "How many different nationalities do conductors have?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "835", "plan": "SELECT count ( DISTINCT nationality ) FROM conductor", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Count the number of different nationalities of conductors."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "836", "plan": "SELECT name FROM conductor ORDER BY year_of_work DESC", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "List names of conductors in descending order of years of work."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "837", "plan": "SELECT name FROM conductor ORDER BY year_of_work DESC", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the names of conductors, sorted descending by the number of years they have worked?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "838", "plan": "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "List the name of the conductor with the most years of work."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "839", "plan": "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What is the name of the conductor who has worked the greatest number of years?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "840", "plan": "SELECT T1 . name , T2 . orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1 . conductor_id = T2 . conductor_id", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Show the names of conductors and the orchestras they have conducted."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "841", "plan": "SELECT T1 . name , T2 . orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1 . conductor_id = T2 . conductor_id", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the names of conductors as well as the corresonding orchestras that they have conducted?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "842", "plan": "SELECT T1 . name FROM conductor AS T1 JOIN orchestra AS T2 ON T1 . conductor_id = T2 . conductor_id GROUP BY T2 . conductor_id HAVING count ( * ) > 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Show the names of conductors that have conducted more than one orchestras."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "843", "plan": "SELECT T1 . name FROM conductor AS T1 JOIN orchestra AS T2 ON T1 . conductor_id = T2 . conductor_id GROUP BY T2 . conductor_id HAVING count ( * ) > 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the names of conductors who have conducted at more than one orchestra?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "844", "plan": "SELECT T1 . name FROM conductor AS T1 JOIN orchestra AS T2 ON T1 . conductor_id = T2 . conductor_id GROUP BY T2 . conductor_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Show the name of the conductor that has conducted the most number of orchestras."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "845", "plan": "SELECT T1 . name FROM conductor AS T1 JOIN orchestra AS T2 ON T1 . conductor_id = T2 . conductor_id GROUP BY T2 . conductor_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What is the name of the conductor who has conducted the most orchestras?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "846", "plan": "SELECT T1 . name FROM conductor AS T1 JOIN orchestra AS T2 ON T1 . conductor_id = T2 . conductor_id WHERE year_of_founded > 2008", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Please show the name of the conductor that has conducted orchestras founded after 2008."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "847", "plan": "SELECT T1 . name FROM conductor AS T1 JOIN orchestra AS T2 ON T1 . conductor_id = T2 . conductor_id WHERE year_of_founded > 2008", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the names of conductors who have conducted orchestras founded after the year 2008?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "848", "plan": "SELECT record_company , count ( * ) FROM orchestra GROUP BY record_company", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Please show the different record companies and the corresponding number of orchestras."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "849", "plan": "SELECT record_company , count ( * ) FROM orchestra GROUP BY record_company", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "How many orchestras does each record company manage?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "850", "plan": "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count ( * ) ASC", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Please show the record formats of orchestras in ascending order of count."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "851", "plan": "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count ( * ) ASC", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the major record formats of orchestras, sorted by their frequency?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "852", "plan": "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "List the record company shared by the most number of orchestras."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "853", "plan": "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What is the record company used by the greatest number of orchestras?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "854", "plan": "SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN ( SELECT orchestra_id FROM performance )", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "List the names of orchestras that have no performance."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "855", "plan": "SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN ( SELECT orchestra_ID FROM performance )", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the orchestras that do not have any performances?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "856", "plan": "SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Show the record companies shared by orchestras founded before 2003 and after 2003."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "857", "plan": "SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "858", "plan": "SELECT count ( * ) FROM orchestra WHERE major_record_format = \"CD\" OR major_record_format = \"DVD\"", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Find the number of orchestras whose record format is \"CD\" or \"DVD\"."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "859", "plan": "SELECT count ( * ) FROM orchestra WHERE major_record_format = \"CD\" OR major_record_format = \"DVD\"", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Count the number of orchestras that have CD or DVD as their record format."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "860", "plan": "SELECT year_of_founded FROM orchestra AS T1 JOIN performance AS T2 ON T1 . orchestra_id = T2 . orchestra_id GROUP BY T2 . orchestra_id HAVING count ( * ) > 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Show the years in which orchestras that have given more than one performance are founded."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "861", "plan": "SELECT year_of_founded FROM orchestra AS T1 JOIN performance AS T2 ON T1 . orchestra_id = T2 . orchestra_id GROUP BY T2 . orchestra_id HAVING count ( * ) > 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are years of founding for orchestras that have had more than a single performance?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "862", "plan": "SELECT count ( * ) FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "How many high schoolers are there?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "863", "plan": "SELECT count ( * ) FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Count the number of high schoolers."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "864", "plan": "SELECT name , grade FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names and grades of each high schooler."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "865", "plan": "SELECT name , grade FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names and grades for each high schooler?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "866", "plan": "SELECT grade FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show all the grades of the high schoolers."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "867", "plan": "SELECT grade FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What is the grade of each high schooler?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "868", "plan": "SELECT grade FROM highschooler WHERE name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What grade is Kyle in?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "869", "plan": "SELECT grade FROM highschooler WHERE name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Return the grade for the high schooler named Kyle."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "870", "plan": "SELECT name FROM highschooler WHERE grade = 10", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names of all high schoolers in grade 10."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "871", "plan": "SELECT name FROM highschooler WHERE grade = 10", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names of all high schoolers in grade 10?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "872", "plan": "SELECT id FROM highschooler WHERE name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the ID of the high schooler named Kyle."}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "873", "plan": "SELECT id FROM highschooler WHERE name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What is Kyle's id?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "874", "plan": "SELECT count ( * ) FROM highschooler WHERE grade = 9 OR grade = 10", "schema_name": "network_1", "turn_part_index": 0, "utterance": "How many high schoolers are there in grade 9 or 10?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "875", "plan": "SELECT count ( * ) FROM highschooler WHERE grade = 9 OR grade = 10", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Count the number of high schoolers in grades 9 or 10."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "876", "plan": "SELECT grade , count ( * ) FROM highschooler GROUP BY grade", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the number of high schoolers for each grade."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "877", "plan": "SELECT grade , count ( * ) FROM highschooler GROUP BY grade", "schema_name": "network_1", "turn_part_index": 0, "utterance": "How many high schoolers are in each grade?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "878", "plan": "SELECT grade FROM highschooler GROUP BY grade ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Which grade has the most high schoolers?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "879", "plan": "SELECT grade FROM highschooler GROUP BY grade ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Return the grade that has the greatest number of high schoolers."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "880", "plan": "SELECT grade FROM highschooler GROUP BY grade HAVING count ( * ) >= 4", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show me all grades that have at least 4 students."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "881", "plan": "SELECT grade FROM highschooler GROUP BY grade HAVING count ( * ) >= 4", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Which grades have 4 or more high schoolers?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "882", "plan": "SELECT student_id , count ( * ) FROM friend GROUP BY student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the student IDs and numbers of friends corresponding to each."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "883", "plan": "SELECT student_id , count ( * ) FROM friend GROUP BY student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "How many friends does each student have?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "884", "plan": "SELECT T2 . name , count ( * ) FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names of high school students and their corresponding number of friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "885", "plan": "SELECT T2 . name , count ( * ) FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names of the high schoolers and how many friends does each have?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "886", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What is the name of the high schooler who has the greatest number of friends?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "887", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Return the name of the high school student with the most friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "888", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id HAVING count ( * ) >= 3", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names of high schoolers who have at least 3 friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "889", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id HAVING count ( * ) >= 3", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names of high schoolers who have 3 or more friends?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "890", "plan": "SELECT T3 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id JOIN highschooler AS T3 ON T1 . friend_id = T3 . id WHERE T2 . name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names of all of the high schooler Kyle's friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "891", "plan": "SELECT T3 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id JOIN highschooler AS T3 ON T1 . friend_id = T3 . id WHERE T2 . name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Return the names of friends of the high school student Kyle."}
