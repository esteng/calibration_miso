{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "847", "plan": "SELECT T1 . name FROM conductor AS T1 JOIN orchestra AS T2 ON T1 . conductor_id = T2 . conductor_id WHERE year_of_founded > 2008", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the names of conductors who have conducted orchestras founded after the year 2008?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "848", "plan": "SELECT record_company , count ( * ) FROM orchestra GROUP BY record_company", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Please show the different record companies and the corresponding number of orchestras."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "849", "plan": "SELECT record_company , count ( * ) FROM orchestra GROUP BY record_company", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "How many orchestras does each record company manage?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "850", "plan": "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count ( * ) ASC", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Please show the record formats of orchestras in ascending order of count."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "851", "plan": "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count ( * ) ASC", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the major record formats of orchestras, sorted by their frequency?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "852", "plan": "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "List the record company shared by the most number of orchestras."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "853", "plan": "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What is the record company used by the greatest number of orchestras?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "854", "plan": "SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN ( SELECT orchestra_id FROM performance )", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "List the names of orchestras that have no performance."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "855", "plan": "SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN ( SELECT orchestra_ID FROM performance )", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the orchestras that do not have any performances?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "856", "plan": "SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Show the record companies shared by orchestras founded before 2003 and after 2003."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "857", "plan": "SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?"}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "858", "plan": "SELECT count ( * ) FROM orchestra WHERE major_record_format = \"CD\" OR major_record_format = \"DVD\"", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Find the number of orchestras whose record format is \"CD\" or \"DVD\"."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format ( DVD , CD ) | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "859", "plan": "SELECT count ( * ) FROM orchestra WHERE major_record_format = \"CD\" OR major_record_format = \"DVD\"", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Count the number of orchestras that have CD or DVD as their record format."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "860", "plan": "SELECT year_of_founded FROM orchestra AS T1 JOIN performance AS T2 ON T1 . orchestra_id = T2 . orchestra_id GROUP BY T2 . orchestra_id HAVING count ( * ) > 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "Show the years in which orchestras that have given more than one performance are founded."}
{"db_schema_with_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "db_schema_without_val": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance", "dialogue_id": "861", "plan": "SELECT year_of_founded FROM orchestra AS T1 JOIN performance AS T2 ON T1 . orchestra_id = T2 . orchestra_id GROUP BY T2 . orchestra_id HAVING count ( * ) > 1", "schema_name": "orchestra", "turn_part_index": 0, "utterance": "What are years of founding for orchestras that have had more than a single performance?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "862", "plan": "SELECT count ( * ) FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "How many high schoolers are there?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "863", "plan": "SELECT count ( * ) FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Count the number of high schoolers."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "864", "plan": "SELECT name , grade FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names and grades of each high schooler."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "865", "plan": "SELECT name , grade FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names and grades for each high schooler?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "866", "plan": "SELECT grade FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show all the grades of the high schoolers."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "867", "plan": "SELECT grade FROM highschooler", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What is the grade of each high schooler?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "868", "plan": "SELECT grade FROM highschooler WHERE name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What grade is Kyle in?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "869", "plan": "SELECT grade FROM highschooler WHERE name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Return the grade for the high schooler named Kyle."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "870", "plan": "SELECT name FROM highschooler WHERE grade = 10", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names of all high schoolers in grade 10."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "871", "plan": "SELECT name FROM highschooler WHERE grade = 10", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names of all high schoolers in grade 10?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "872", "plan": "SELECT id FROM highschooler WHERE name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the ID of the high schooler named Kyle."}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "873", "plan": "SELECT id FROM highschooler WHERE name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What is Kyle's id?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "874", "plan": "SELECT count ( * ) FROM highschooler WHERE grade = 9 OR grade = 10", "schema_name": "network_1", "turn_part_index": 0, "utterance": "How many high schoolers are there in grade 9 or 10?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "875", "plan": "SELECT count ( * ) FROM highschooler WHERE grade = 9 OR grade = 10", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Count the number of high schoolers in grades 9 or 10."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "876", "plan": "SELECT grade , count ( * ) FROM highschooler GROUP BY grade", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the number of high schoolers for each grade."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "877", "plan": "SELECT grade , count ( * ) FROM highschooler GROUP BY grade", "schema_name": "network_1", "turn_part_index": 0, "utterance": "How many high schoolers are in each grade?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "878", "plan": "SELECT grade FROM highschooler GROUP BY grade ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Which grade has the most high schoolers?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "879", "plan": "SELECT grade FROM highschooler GROUP BY grade ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Return the grade that has the greatest number of high schoolers."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "880", "plan": "SELECT grade FROM highschooler GROUP BY grade HAVING count ( * ) >= 4", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show me all grades that have at least 4 students."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "881", "plan": "SELECT grade FROM highschooler GROUP BY grade HAVING count ( * ) >= 4", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Which grades have 4 or more high schoolers?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "882", "plan": "SELECT student_id , count ( * ) FROM friend GROUP BY student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the student IDs and numbers of friends corresponding to each."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "883", "plan": "SELECT student_id , count ( * ) FROM friend GROUP BY student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "How many friends does each student have?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "884", "plan": "SELECT T2 . name , count ( * ) FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names of high school students and their corresponding number of friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "885", "plan": "SELECT T2 . name , count ( * ) FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names of the high schoolers and how many friends does each have?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "886", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What is the name of the high schooler who has the greatest number of friends?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "887", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Return the name of the high school student with the most friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "888", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id HAVING count ( * ) >= 3", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names of high schoolers who have at least 3 friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "889", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id HAVING count ( * ) >= 3", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names of high schoolers who have 3 or more friends?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "890", "plan": "SELECT T3 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id JOIN highschooler AS T3 ON T1 . friend_id = T3 . id WHERE T2 . name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names of all of the high schooler Kyle's friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "891", "plan": "SELECT T3 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id JOIN highschooler AS T3 ON T1 . friend_id = T3 . id WHERE T2 . name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Return the names of friends of the high school student Kyle."}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "892", "plan": "SELECT count ( * ) FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id WHERE T2 . name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "How many friends does the high school student Kyle have?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "893", "plan": "SELECT count ( * ) FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id WHERE T2 . name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Count the number of friends Kyle has."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "894", "plan": "SELECT id FROM highschooler EXCEPT SELECT student_id FROM friend", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show ids of all students who do not have any friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "895", "plan": "SELECT id FROM highschooler EXCEPT SELECT student_id FROM friend", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the ids of high school students who do not have friends?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "896", "plan": "SELECT name FROM highschooler EXCEPT SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show names of all high school students who do not have any friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "897", "plan": "SELECT name FROM highschooler EXCEPT SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names of students who have no friends?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "898", "plan": "SELECT student_id FROM friend INTERSECT SELECT liked_id FROM likes", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the ids of high schoolers who have friends and are also liked by someone else."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "899", "plan": "SELECT student_id FROM friend INTERSECT SELECT liked_id FROM likes", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the ids of students who both have friends and are liked?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "900", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id INTERSECT SELECT T2 . name FROM likes AS T1 JOIN highschooler AS T2 ON T1 . liked_id = T2 . id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show name of all students who have some friends and also are liked by someone else."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "901", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id INTERSECT SELECT T2 . name FROM likes AS T1 JOIN highschooler AS T2 ON T1 . liked_id = T2 . id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names of high schoolers who both have friends and are liked?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "902", "plan": "SELECT student_id , count ( * ) FROM likes GROUP BY student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Count the number of likes for each student id."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "903", "plan": "SELECT student_id , count ( * ) FROM likes GROUP BY student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "How many likes correspond to each student id?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "904", "plan": "SELECT T2 . name , count ( * ) FROM likes AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names of high schoolers who have likes, and numbers of likes for each."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "905", "plan": "SELECT T2 . name , count ( * ) FROM likes AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names of high schoolers who have likes, and how many likes does each have?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "906", "plan": "SELECT T2 . name FROM likes AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What is the name of the high schooler who has the greatest number of likes?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "907", "plan": "SELECT T2 . name FROM likes AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Give the name of the student with the most likes."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "908", "plan": "SELECT T2 . name FROM likes AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id HAVING count ( * ) >= 2", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names of students who have at least 2 likes."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "909", "plan": "SELECT T2 . name FROM likes AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id GROUP BY T1 . student_id HAVING count ( * ) >= 2", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names of students who have 2 or more likes?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "910", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id WHERE T2 . grade > 5 GROUP BY T1 . student_id HAVING count ( * ) >= 2", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Show the names of students who have a grade higher than 5 and have at least 2 friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "911", "plan": "SELECT T2 . name FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id WHERE T2 . grade > 5 GROUP BY T1 . student_id HAVING count ( * ) >= 2", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "912", "plan": "SELECT count ( * ) FROM likes AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id WHERE T2 . name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "How many likes does Kyle have?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "913", "plan": "SELECT count ( * ) FROM likes AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id WHERE T2 . name = \"Kyle\"", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Return the number of likes that the high schooler named Kyle has."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "914", "plan": "SELECT avg ( grade ) FROM highschooler WHERE id IN ( SELECT T1 . student_id FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id )", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Find the average grade of all students who have some friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "915", "plan": "SELECT avg ( grade ) FROM highschooler WHERE id IN ( SELECT T1 . student_id FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id )", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What is the average grade of students who have friends?"}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "916", "plan": "SELECT min ( grade ) FROM highschooler WHERE id NOT IN ( SELECT T1 . student_id FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id )", "schema_name": "network_1", "turn_part_index": 0, "utterance": "Find the minimum grade of students who have no friends."}
{"db_schema_with_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "db_schema_without_val": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id", "dialogue_id": "917", "plan": "SELECT min ( grade ) FROM highschooler WHERE id NOT IN ( SELECT T1 . student_id FROM friend AS T1 JOIN highschooler AS T2 ON T1 . student_id = T2 . id )", "schema_name": "network_1", "turn_part_index": 0, "utterance": "What is the lowest grade of students who do not have any friends?"}
{"db_schema_with_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "db_schema_without_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "dialogue_id": "918", "plan": "SELECT state FROM owners INTERSECT SELECT state FROM professionals", "schema_name": "dog_kennels", "turn_part_index": 0, "utterance": "Which states have both owners and professionals living there?"}
{"db_schema_with_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "db_schema_without_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "dialogue_id": "919", "plan": "SELECT state FROM owners INTERSECT SELECT state FROM professionals", "schema_name": "dog_kennels", "turn_part_index": 0, "utterance": "Find the states where both owners and professionals live."}
{"db_schema_with_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "db_schema_without_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "dialogue_id": "920", "plan": "SELECT avg ( age ) FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments )", "schema_name": "dog_kennels", "turn_part_index": 0, "utterance": "What is the average age of the dogs who have gone through any treatments?"}
{"db_schema_with_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "db_schema_without_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "dialogue_id": "921", "plan": "SELECT avg ( age ) FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments )", "schema_name": "dog_kennels", "turn_part_index": 0, "utterance": "Find the average age of the dogs who went through treatments."}
{"db_schema_with_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Indiana ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state ( Indiana ) , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "db_schema_without_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "dialogue_id": "922", "plan": "SELECT professional_id , last_name , cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT T1 . professional_id , T1 . last_name , T1 . cell_number FROM professionals AS T1 JOIN treatments AS T2 ON T1 . professional_id = T2 . professional_id GROUP BY T1 . professional_id HAVING count ( * ) > 2", "schema_name": "dog_kennels", "turn_part_index": 0, "utterance": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone."}
{"db_schema_with_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Indiana ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state ( Indiana ) , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "db_schema_without_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "dialogue_id": "923", "plan": "SELECT professional_id , last_name , cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT T1 . professional_id , T1 . last_name , T1 . cell_number FROM professionals AS T1 JOIN treatments AS T2 ON T1 . professional_id = T2 . professional_id GROUP BY T1 . professional_id HAVING count ( * ) > 2", "schema_name": "dog_kennels", "turn_part_index": 0, "utterance": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments."}
{"db_schema_with_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "db_schema_without_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "dialogue_id": "924", "plan": "SELECT name FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments GROUP BY dog_id HAVING sum ( cost_of_treatment ) > 1000 )", "schema_name": "dog_kennels", "turn_part_index": 0, "utterance": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names ."}
{"db_schema_with_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "db_schema_without_val": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment", "dialogue_id": "925", "plan": "SELECT name FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments GROUP BY dog_id HAVING sum ( cost_of_treatment ) > 1000 )", "schema_name": "dog_kennels", "turn_part_index": 0, "utterance": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?"}
