{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "0", "plan": "SELECT count ( * ) FROM singer", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "How many singers do we have?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "1", "plan": "SELECT count ( * ) FROM singer", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What is the total number of singers?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "2", "plan": "SELECT name , country , age FROM singer ORDER BY age DESC", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Show name, country, age for all singers ordered by age from the oldest to the youngest."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "3", "plan": "SELECT name , country , age FROM singer ORDER BY age DESC", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are the names, countries, and ages for every singer in descending order of age?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country ( France ) , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "4", "plan": "SELECT avg ( age ) , min ( age ) , max ( age ) FROM singer WHERE country = 'France'", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What is the average, minimum, and maximum age of all singers from France?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "5", "plan": "SELECT avg ( age ) , min ( age ) , max ( age ) FROM singer WHERE country = 'France'", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What is the average, minimum, and maximum age for all French singers?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "6", "plan": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Show the name and the release year of the song by the youngest singer."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "7", "plan": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are the names and release years for all the songs of the youngest singer?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "8", "plan": "SELECT DISTINCT country FROM singer WHERE age > 20", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are all distinct countries where singers above age 20 are from?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "9", "plan": "SELECT DISTINCT country FROM singer WHERE age > 20", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are  the different countries with singers above age 20?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "10", "plan": "SELECT country , count ( * ) FROM singer GROUP BY country", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Show all countries and the number of singers in each country."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "11", "plan": "SELECT country , count ( * ) FROM singer GROUP BY country", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "How many singers are from each country?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "12", "plan": "SELECT song_name FROM singer WHERE age > ( SELECT avg ( age ) FROM singer )", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "List all song names by singers above the average age."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "13", "plan": "SELECT song_name FROM singer WHERE age > ( SELECT avg ( age ) FROM singer )", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are all the song names by singers who are older than average?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "14", "plan": "SELECT location , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Show location and name for all stadiums with a capacity between 5000 and 10000."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "15", "plan": "SELECT location , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are the locations and names of all stations with capacity between 5000 and 10000?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "16", "plan": "SELECT max ( capacity ) , average FROM stadium", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What is the maximum capacity and the average of all stadiums ?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "17", "plan": "SELECT avg ( capacity ) , max ( capacity ) FROM stadium", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What is the average and maximum capacities for all stadiums ?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "18", "plan": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What is the name and capacity for the stadium with highest average attendance?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "19", "plan": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What is the name and capacity for the stadium with the highest average attendance?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "20", "plan": "SELECT count ( * ) FROM concert WHERE year = 2014 OR year = 2015", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "How many concerts are there in year 2014 or 2015?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "21", "plan": "SELECT count ( * ) FROM concert WHERE year = 2014 OR year = 2015", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "How many concerts occurred in 2014 or 2015?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "22", "plan": "SELECT T2 . name , count ( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1 . stadium_id = T2 . stadium_id GROUP BY T1 . stadium_id", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Show the stadium name and the number of concerts in each stadium."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "23", "plan": "SELECT T2 . name , count ( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1 . stadium_id = T2 . stadium_id GROUP BY T1 . stadium_id", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "For each stadium, how many concerts play there?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "24", "plan": "SELECT T2 . name , T2 . capacity FROM concert AS T1 JOIN stadium AS T2 ON T1 . stadium_id = T2 . stadium_id WHERE T1 . year >= 2014 GROUP BY T2 . stadium_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Show the stadium name and capacity with most number of concerts in year 2014 or after."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "25", "plan": "SELECT T2 . name , T2 . capacity FROM concert AS T1 JOIN stadium AS T2 ON T1 . stadium_id = T2 . stadium_id WHERE T1 . year > 2013 GROUP BY T2 . stadium_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What is the name and capacity of the stadium with the most concerts after 2013 ?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "26", "plan": "SELECT year FROM concert GROUP BY year ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Which year has most number of concerts?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "27", "plan": "SELECT year FROM concert GROUP BY year ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What is the year that had the most concerts?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "28", "plan": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Show the stadium names without any concert."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "29", "plan": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are the names of the stadiums without any concerts?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "30", "plan": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Show countries where a singer above age 40 and a singer below 30 are from."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "31", "plan": "SELECT name FROM stadium EXCEPT SELECT T2 . name FROM concert AS T1 JOIN stadium AS T2 ON T1 . stadium_id = T2 . stadium_id WHERE T1 . year = 2014", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Show names for all stadiums except for stadiums having a concert in year 2014."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "32", "plan": "SELECT name FROM stadium EXCEPT SELECT T2 . name FROM concert AS T1 JOIN stadium AS T2 ON T1 . stadium_id = T2 . stadium_id WHERE T1 . year = 2014", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are the names of all stadiums that did not have a concert in 2014?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "33", "plan": "SELECT T2 . concert_name , T2 . theme , count ( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1 . concert_id = T2 . concert_id GROUP BY T2 . concert_id", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Show the name and theme for all concerts and the number of singers in each concert."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "34", "plan": "SELECT T2 . concert_name , T2 . theme , count ( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1 . concert_id = T2 . concert_id GROUP BY T2 . concert_id", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are the names , themes , and number of singers for every concert ?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "35", "plan": "SELECT T2 . name , count ( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1 . singer_id = T2 . singer_id GROUP BY T2 . singer_id", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "List singer names and number of concerts for each singer."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "36", "plan": "SELECT T2 . name , count ( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1 . singer_id = T2 . singer_id GROUP BY T2 . singer_id", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are the names of the singers and number of concerts for each person?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "37", "plan": "SELECT T2 . name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1 . singer_id = T2 . singer_id JOIN concert AS T3 ON T1 . concert_id = T3 . concert_id WHERE T3 . year = 2014", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "List all singer names in concerts in year 2014."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "38", "plan": "SELECT T2 . name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1 . singer_id = T2 . singer_id JOIN concert AS T3 ON T1 . concert_id = T3 . concert_id WHERE T3 . year = 2014", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are the names of the singers who performed in a concert in 2014?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "39", "plan": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "what is the name and nation of the singer who have a song having 'Hey' in its name?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "40", "plan": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "41", "plan": "SELECT T2 . name , T2 . location FROM concert AS T1 JOIN stadium AS T2 ON T1 . stadium_id = T2 . stadium_id WHERE T1 . year = 2014 INTERSECT SELECT T2 . name , T2 . location FROM concert AS T1 JOIN stadium AS T2 ON T1 . stadium_id = T2 . stadium_id WHERE T1 . year = 2015", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "42", "plan": "SELECT T2 . name , T2 . location FROM concert AS T1 JOIN stadium AS T2 ON T1 . stadium_id = T2 . stadium_id WHERE T1 . year = 2014 INTERSECT SELECT T2 . name , T2 . location FROM concert AS T1 JOIN stadium AS T2 ON T1 . stadium_id = T2 . stadium_id WHERE T1 . year = 2015", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?"}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "43", "plan": "SELECT count ( * ) FROM concert WHERE stadium_id = ( SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1 )", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "Find the number of concerts happened in the stadium with the highest capacity ."}
{"db_schema_with_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "db_schema_without_val": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id", "dialogue_id": "44", "plan": "SELECT count ( * ) FROM concert WHERE stadium_id = ( SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1 )", "schema_name": "concert_singer", "turn_part_index": 0, "utterance": "What are the number of concerts that occurred in the stadium with the largest capacity ?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "45", "plan": "SELECT count ( * ) FROM pets WHERE weight > 10", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the number of pets whose weight is heavier than 10."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "46", "plan": "SELECT count ( * ) FROM pets WHERE weight > 10", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "How many pets have a greater weight than 10?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "47", "plan": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the weight of the youngest dog."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "48", "plan": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "How much does the youngest dog weigh?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "49", "plan": "SELECT max ( weight ) , pettype FROM pets GROUP BY pettype", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the maximum weight for each type of pet. List the maximum weight and pet type."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "50", "plan": "SELECT max ( weight ) , pettype FROM pets GROUP BY pettype", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "List the maximum weight and type for each type of pet."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "51", "plan": "SELECT count ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid WHERE T1 . age > 20", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find number of pets owned by students who are older than 20."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "52", "plan": "SELECT count ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid WHERE T1 . age > 20", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "How many pets are owned by students that have an age greater than 20?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "53", "plan": "SELECT count ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T2 . petid = T3 . petid WHERE T1 . sex = 'F' AND T3 . pettype = 'dog'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the number of dog pets that are raised by female students (with sex F)."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "54", "plan": "SELECT count ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T2 . petid = T3 . petid WHERE T1 . sex = 'F' AND T3 . pettype = 'dog'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "How many dog pets are raised by female students?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "55", "plan": "SELECT count ( DISTINCT pettype ) FROM pets", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the number of distinct type of pets."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "56", "plan": "SELECT count ( DISTINCT pettype ) FROM pets", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "How many different types of pet are there?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat , dog ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "57", "plan": "SELECT DISTINCT T1 . fname FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'cat' OR T3 . pettype = 'dog'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the first name of students who have cat or dog pet."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat , dog ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "58", "plan": "SELECT DISTINCT T1 . fname FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'cat' OR T3 . pettype = 'dog'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What are the first names of every student who has a cat or dog as a pet?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat , dog ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "59", "plan": "SELECT T1 . fname FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'cat' INTERSECT SELECT T1 . fname FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'dog'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the first name of students who have both cat and dog pets ."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat , dog ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "60", "plan": "SELECT T1 . fname FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'cat' INTERSECT SELECT T1 . fname FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'dog'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What are the students' first names who have both cats and dogs as pets?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "61", "plan": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1 . stuid FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'cat' )", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the major and age of students who do not have a cat pet."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "62", "plan": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1 . stuid FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'cat' )", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What major is every student who does not own a cat as a pet, and also how old are they?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "63", "plan": "SELECT stuid FROM student EXCEPT SELECT T1 . stuid FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'cat'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the id of students who do not have a cat pet."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "64", "plan": "SELECT stuid FROM student EXCEPT SELECT T1 . stuid FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'cat'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What are the ids of the students who do not own cats as pets?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat , dog ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "65", "plan": "SELECT T1 . fname , T1 . age FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'dog' AND T1 . stuid NOT IN ( SELECT T1 . stuid FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'cat' )", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the first name and age of students who have a dog but do not have a cat as a pet."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat , dog ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "66", "plan": "SELECT T1 . fname , T1 . age FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'dog' AND T1 . stuid NOT IN ( SELECT T1 . stuid FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pettype = 'cat' )", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What is the first name of every student who has a dog but does not have a cat?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "67", "plan": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the type and weight of the youngest pet."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "68", "plan": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What type of pet is the youngest animal, and how much does it weigh?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "69", "plan": "SELECT petid , weight FROM pets WHERE pet_age > 1", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the id and weight of all pets whose age is older than 1."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "70", "plan": "SELECT petid , weight FROM pets WHERE pet_age > 1", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What is the id and weight of every pet who is older than 1?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "71", "plan": "SELECT avg ( pet_age ) , max ( pet_age ) , pettype FROM pets GROUP BY pettype", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the average and maximum age for each type of pet."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "72", "plan": "SELECT avg ( pet_age ) , max ( pet_age ) , pettype FROM pets GROUP BY pettype", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What is the average and maximum age for each pet type?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "73", "plan": "SELECT avg ( weight ) , pettype FROM pets GROUP BY pettype", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the average weight for each pet type."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "74", "plan": "SELECT avg ( weight ) , pettype FROM pets GROUP BY pettype", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What is the average weight for each type of pet?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "75", "plan": "SELECT DISTINCT T1 . fname , T1 . age FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the first name and age of students who have a pet."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "76", "plan": "SELECT DISTINCT T1 . fname , T1 . age FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What are the different first names and ages of the students who do have pets?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "77", "plan": "SELECT T2 . petid FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid WHERE T1 . lname = 'Smith'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname ( Smith ) , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "78", "plan": "SELECT T2 . petid FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid WHERE T1 . lname = 'Smith'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What is the id of the pet owned by the student whose last name is 'Smith'?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "79", "plan": "SELECT count ( * ) , T1 . stuid FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid GROUP BY T1 . stuid", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the number of pets for each student who has any pet and student id."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "80", "plan": "SELECT count ( * ) , T1 . stuid FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid GROUP BY T1 . stuid", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "For students who have pets , how many pets does each student have ? list their ids instead of names ."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "81", "plan": "SELECT T1 . fname , T1 . sex FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid GROUP BY T1 . stuid HAVING count ( * ) > 1", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the first name and gender of student who have more than one pet."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "82", "plan": "SELECT T1 . fname , T1 . sex FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid GROUP BY T1 . stuid HAVING count ( * ) > 1", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What is the first name and gender of the all the students who have more than one pet?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "83", "plan": "SELECT T1 . lname FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pet_age = 3 AND T3 . pettype = 'cat'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the last name of the student who has a cat that is age 3."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "84", "plan": "SELECT T1 . lname FROM student AS T1 JOIN has_pet AS T2 ON T1 . stuid = T2 . stuid JOIN pets AS T3 ON T3 . petid = T2 . petid WHERE T3 . pet_age = 3 AND T3 . pettype = 'cat'", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What is the last name of the student who has a cat that is 3 years old?"}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "85", "plan": "SELECT avg ( age ) FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_pet )", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "Find the average age of students who do not have any pet ."}
{"db_schema_with_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "db_schema_without_val": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight", "dialogue_id": "86", "plan": "SELECT avg ( age ) FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_pet )", "schema_name": "pets_1", "turn_part_index": 0, "utterance": "What is the average age for all students who do not own any pets ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "87", "plan": "SELECT count ( * ) FROM continents ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many continents are there?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "88", "plan": "SELECT count ( * ) FROM continents ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the number of continents?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "89", "plan": "SELECT T1 . contid , T1 . continent , count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1 . contid = T2 . continent GROUP BY T1 . contid ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many countries does each continent have? List the continent id, continent name and the number of countries."}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "90", "plan": "SELECT T1 . contid , T1 . continent , count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1 . contid = T2 . continent GROUP BY T1 . contid ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "For each continent, list its id, name, and how many countries it has?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "91", "plan": "SELECT count ( * ) FROM countries ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many countries are listed?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "92", "plan": "SELECT count ( * ) FROM countries ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many countries exist?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "93", "plan": "SELECT T1 . fullname , T1 . id , count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker GROUP BY T1 . id ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many models does each car maker produce? List maker full name, id and the number."}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "94", "plan": "SELECT T1 . fullname , T1 . id , count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker GROUP BY T1 . id ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the full name of each car maker, along with its id and how many models it produces?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "95", "plan": "SELECT T1 . model FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id ORDER BY T2 . horsepower ASC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Which model of the car has the minimum horsepower?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "96", "plan": "SELECT T1 . model FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id ORDER BY T2 . horsepower ASC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the model of the car with the smallest amount of horsepower?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "97", "plan": "SELECT T1 . model FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id WHERE T2 . weight < ( SELECT avg ( weight ) FROM cars_data )", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Find the model of the car whose weight is below the average weight."}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "98", "plan": "SELECT T1 . model FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id WHERE T2 . weight < ( SELECT avg ( weight ) FROM cars_data )", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the model for the car with a weight smaller than the average?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "99", "plan": "SELECT DISTINCT T1 . maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker JOIN car_names AS T3 ON T2 . model = T3 . model JOIN cars_data AS T4 ON T3 . makeid = T4 . id WHERE T4 . year = '1970' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Find the name of the makers that produced some cars in the year of 1970?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "100", "plan": "SELECT DISTINCT T1 . maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker JOIN car_names AS T3 ON T2 . model = T3 . model JOIN cars_data AS T4 ON T3 . makeid = T4 . id WHERE T4 . year = '1970' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the name of the different car makers who produced a car in 1970?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "101", "plan": "SELECT T2 . make , T1 . year FROM cars_data AS T1 JOIN car_names AS T2 ON T1 . id = T2 . makeid WHERE T1 . year = ( SELECT min ( year ) FROM cars_data ) ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Find the make and production time of the cars that were produced in the earliest year?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "102", "plan": "SELECT T2 . make , T1 . year FROM cars_data AS T1 JOIN car_names AS T2 ON T1 . id = T2 . makeid WHERE T1 . year = ( SELECT min ( year ) FROM cars_data ) ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the maker of the carr produced in the earliest year and what year was it?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "103", "plan": "SELECT DISTINCT T1 . model FROM model_list AS T1 JOIN car_names AS T2 ON T1 . model = T2 . model JOIN cars_data AS T3 ON T2 . makeid = T3 . id WHERE T3 . year > 1980 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Which distinct car models are the produced after 1980?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "104", "plan": "SELECT DISTINCT T1 . model FROM model_list AS T1 JOIN car_names AS T2 ON T1 . model = T2 . model JOIN cars_data AS T3 ON T2 . makeid = T3 . id WHERE T3 . year > 1980 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the different models for the cards produced after 1980?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "105", "plan": "SELECT T1 . continent , count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1 . contid = T2 . continent JOIN car_makers AS T3 ON T2 . countryid = T3 . country GROUP BY T1 . continent ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many car makers are there in each continents? List the continent name and the count."}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "106", "plan": "SELECT T1 . continent , count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1 . contid = T2 . continent JOIN car_makers AS T3 ON T2 . countryid = T3 . country GROUP BY T1 . continent ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the name of each continent and how many car makers are there in each one?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "107", "plan": "SELECT T2 . countryName FROM car_makers AS T1 JOIN countries AS T2 ON T1 . country = T2 . countryid GROUP BY T1 . country ORDER BY count ( * ) DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Which of the countries has the most car makers? List the country name."}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "108", "plan": "SELECT T2 . countryname FROM car_makers AS T1 JOIN countries AS T2 ON T1 . country = T2 . countryid GROUP BY T1 . country ORDER BY count ( * ) DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the name of the country with the most car makers?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "109", "plan": "SELECT count ( * ) , T2 . fullname FROM model_list AS T1 JOIN car_makers AS T2 ON T1 . maker = T2 . id GROUP BY T2 . id ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many car models are produced by each maker ? Only list the count and the maker full name ."}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "110", "plan": "SELECT count ( * ) , T2 . fullname , T2 . id FROM model_list AS T1 JOIN car_makers AS T2 ON T1 . maker = T2 . id GROUP BY T2 . id ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( amc ) , fullname , country | model_list : modelid , maker , model ( amc ) | car_names : makeid , model ( amc ) , make ( amc hornet , amc hornet sportabout (sw) ) | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "111", "plan": "SELECT T1 . accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1 . id = T2 . makeid WHERE T2 . make = 'amc hornet sportabout (sw)' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the accelerate of the car make amc hornet sportabout (sw)?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( amc ) , fullname , country | model_list : modelid , maker , model ( amc ) | car_names : makeid , model ( amc ) , make ( amc hornet , amc hornet sportabout (sw) ) | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "112", "plan": "SELECT T1 . accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1 . id = T2 . makeid WHERE T2 . make = 'amc hornet sportabout (sw)' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How much does the car accelerate that makes amc hornet sportabout (sw)?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname ( france ) , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "113", "plan": "SELECT count ( * ) FROM car_makers AS T1 JOIN countries AS T2 ON T1 . country = T2 . countryid WHERE T2 . countryname = 'france' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many car makers are there in france?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname ( france ) , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "114", "plan": "SELECT count ( * ) FROM car_makers AS T1 JOIN countries AS T2 ON T1 . country = T2 . countryid WHERE T2 . countryname = 'france' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the number of makers of care in France?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname ( usa ) , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "115", "plan": "SELECT count ( * ) FROM model_list AS T1 JOIN car_makers AS T2 ON T1 . maker = T2 . id JOIN countries AS T3 ON T2 . country = T3 . countryid WHERE T3 . countryname = 'usa' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many car models are produced in the usa?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "116", "plan": "SELECT count ( * ) FROM model_list AS T1 JOIN car_makers AS T2 ON T1 . maker = T2 . id JOIN countries AS T3 ON T2 . country = T3 . countryid WHERE T3 . countryname = 'usa' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the count of the car models produced in the United States?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "117", "plan": "SELECT avg ( mpg ) FROM cars_data WHERE cylinders = 4 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "118", "plan": "SELECT avg ( mpg ) FROM cars_data WHERE cylinders = 4 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the average miles per gallon of all the cards with 4 cylinders?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "119", "plan": "SELECT min ( weight ) FROM cars_data WHERE cylinders = 8 AND year = 1974", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "120", "plan": "SELECT min ( weight ) FROM cars_data WHERE cylinders = 8 AND year = 1974", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "121", "plan": "SELECT maker , model FROM model_list ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are all the makers and models?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "122", "plan": "SELECT maker , model FROM model_list ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the makers and models?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "123", "plan": "SELECT T1 . countryName , T1 . countryid FROM countries AS T1 JOIN car_makers AS T2 ON T1 . countryid = T2 . country GROUP BY T1 . countryid HAVING count ( * ) >= 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the countries having at least one car maker? List name and id."}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "124", "plan": "SELECT T1 . countryname , T1 . countryId FROM countries AS T1 JOIN car_makers AS T2 ON T1 . countryid = T2 . country GROUP BY T1 . countryid HAVING count ( * ) >= 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the names and ids of all countries with at least one car maker?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "125", "plan": "SELECT count ( * ) FROM cars_data WHERE horsepower > 150 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the number of the cars with horsepower more than 150?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "126", "plan": "SELECT count ( * ) FROM cars_data WHERE horsepower > 150 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the number of cars with a horsepower greater than 150?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "127", "plan": "SELECT avg ( weight ) , year FROM cars_data GROUP BY year ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the average weight of cars each year?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "128", "plan": "SELECT avg ( weight ) , year FROM cars_data GROUP BY year ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the average weight and year for each year?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent ( europe ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "129", "plan": "SELECT T1 . countryname FROM countries AS T1 JOIN continents AS T2 ON T1 . continent = T2 . contid JOIN car_makers AS T3 ON T1 . countryid = T3 . country WHERE T2 . continent = 'europe' GROUP BY T1 . countryname HAVING count ( * ) >= 3 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Which countries in europe have at least 3 car manufacturers?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent ( europe ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "130", "plan": "SELECT T1 . countryname FROM countries AS T1 JOIN continents AS T2 ON T1 . continent = T2 . contid JOIN car_makers AS T3 ON T1 . countryid = T3 . country WHERE T2 . continent = 'europe' GROUP BY T1 . countryname HAVING count ( * ) >= 3 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the names of all European countries with at least 3 manufacturers?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "131", "plan": "SELECT T2 . horsepower , T1 . make FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id WHERE T2 . cylinders = 3 ORDER BY T2 . horsepower DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the maximum horsepower and the make of the car models with 3 cylinders?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "132", "plan": "SELECT T2 . horsepower , T1 . make FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id WHERE T2 . cylinders = 3 ORDER BY T2 . horsepower DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "133", "plan": "SELECT T1 . model FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id ORDER BY T2 . mpg DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon."}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "134", "plan": "SELECT T1 . model FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id ORDER BY T2 . mpg DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the car model with the highest mpg ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "135", "plan": "SELECT avg ( horsepower ) FROM cars_data WHERE year < 1980 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the average horsepower of the cars before 1980?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "136", "plan": "SELECT avg ( horsepower ) FROM cars_data WHERE year < 1980 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the average horsepower for all cars produced before 1980 ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "137", "plan": "SELECT avg ( T2 . edispl ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id WHERE T1 . model = 'volvo' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the average edispl of the cars of model volvo?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "138", "plan": "SELECT avg ( T2 . edispl ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id WHERE T1 . model = 'volvo' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the average edispl for all volvos?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "139", "plan": "SELECT max ( accelerate ) , cylinders FROM cars_data GROUP BY cylinders ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the maximum accelerate for different number of cylinders?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "140", "plan": "SELECT max ( accelerate ) , cylinders FROM cars_data GROUP BY cylinders ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the maximum accelerate for all the different cylinders?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "141", "plan": "SELECT model FROM car_names GROUP BY model ORDER BY count ( * ) DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Which model has the most version(make) of cars?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "142", "plan": "SELECT model FROM car_names GROUP BY model ORDER BY count ( * ) DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What model has the most different versions?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "143", "plan": "SELECT count ( * ) FROM cars_data WHERE cylinders > 4 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many cars have more than 4 cylinders?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "144", "plan": "SELECT count ( * ) FROM cars_data WHERE cylinders > 4 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the number of cars with more than 4 cylinders?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "145", "plan": "SELECT count ( * ) FROM cars_data WHERE year = 1980 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "how many cars were produced in 1980?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "146", "plan": "SELECT count ( * ) FROM cars_data WHERE year = 1980 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "In 1980, how many cars were made?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent ( america ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( American Motor Company ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "147", "plan": "SELECT count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker WHERE T1 . fullname = 'American Motor Company' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many car models were produced by the maker with full name American Motor Company?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent ( america ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( American Motor Company ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "148", "plan": "SELECT count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker WHERE T1 . fullname = 'American Motor Company' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the number of car models created by the car maker American Motor Company?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "149", "plan": "SELECT T1 . fullname , T1 . id FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker GROUP BY T1 . id HAVING count ( * ) > 3 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Which makers designed more than 3 car models? List full name and the id."}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "150", "plan": "SELECT T1 . fullname , T1 . id FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker GROUP BY T1 . id HAVING count ( * ) > 3 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the names and ids of all makers with more than 3 models?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( General Motors ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "151", "plan": "SELECT DISTINCT T2 . model FROM car_names AS T1 JOIN model_list AS T2 ON T1 . model = T2 . model JOIN car_makers AS T3 ON T2 . maker = T3 . id JOIN cars_data AS T4 ON T1 . makeid = T4 . id WHERE T3 . fullname = 'General Motors' OR T4 . weight > 3500 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( General Motors ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "152", "plan": "SELECT DISTINCT T2 . model FROM car_names AS T1 JOIN model_list AS T2 ON T1 . model = T2 . model JOIN car_makers AS T3 ON T2 . maker = T3 . id JOIN cars_data AS T4 ON T1 . makeid = T4 . id WHERE T3 . fullname = 'General Motors' OR T4 . weight > 3500 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the different models created by either the car maker General Motors or weighed more than 3500?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "153", "plan": "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "154", "plan": "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "155", "plan": "SELECT T1 . horsepower FROM cars_data AS T1 ORDER BY T1 . accelerate DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the horsepower of the car with the largest accelerate?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "156", "plan": "SELECT T1 . horsepower FROM cars_data AS T1 ORDER BY T1 . accelerate DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the horsepower of the car with the greatest accelerate?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "157", "plan": "SELECT T1 . cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1 . id = T2 . makeid WHERE T2 . model = 'volvo' ORDER BY T1 . accelerate ASC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "For model volvo, how many cylinders does the car with the least accelerate have?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "158", "plan": "SELECT T1 . cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1 . id = T2 . makeid WHERE T2 . model = 'volvo' ORDER BY T1 . accelerate ASC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "For a volvo model, how many cylinders does the version with least accelerate have?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "159", "plan": "SELECT count ( * ) FROM cars_data WHERE accelerate > ( SELECT accelerate FROM cars_data ORDER BY horsepower DESC LIMIT 1 ) ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many cars have a larger accelerate than the car with the largest horsepower?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "160", "plan": "SELECT count ( * ) FROM cars_data WHERE accelerate > ( SELECT accelerate FROM cars_data ORDER BY horsepower DESC LIMIT 1 ) ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the number of cars with a greater accelerate than the one with the most horsepower?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "161", "plan": "SELECT count ( * ) FROM countries AS T1 JOIN car_makers AS T2 ON T1 . countryid = T2 . country GROUP BY T1 . countryid HAVING count ( * ) > 2", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many countries has more than 2 car makers ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "162", "plan": "SELECT count ( * ) FROM countries AS T1 JOIN car_makers AS T2 ON T1 . countryid = T2 . country GROUP BY T1 . countryid HAVING count ( * ) > 2", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the number of countries with more than 2 car makers ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "163", "plan": "SELECT count ( * ) FROM cars_data WHERE cylinders > 6 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "How many cars has over 6 cylinders?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "164", "plan": "SELECT count ( * ) FROM cars_data WHERE cylinders > 6 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the number of carsw ith over 6 cylinders?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "165", "plan": "SELECT T1 . model FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id WHERE T2 . cylinders = 4 ORDER BY T2 . horsepower DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "For the cars with 4 cylinders, which model has the largest horsepower?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "166", "plan": "SELECT T1 . model FROM car_names AS T1 JOIN cars_data AS T2 ON T1 . makeid = T2 . id WHERE T2 . cylinders = 4 ORDER BY T2 . horsepower DESC LIMIT 1 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "For all of the 4 cylinder cars, which model has the most horsepower?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "167", "plan": "SELECT T2 . makeid , T2 . make FROM cars_data AS T1 JOIN car_names AS T2 ON T1 . id = T2 . makeid WHERE T1 . horsepower > ( SELECT min ( horsepower ) FROM cars_data ) AND T1 . cylinders <= 3 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name."}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "168", "plan": "SELECT T2 . makeid , T2 . make FROM cars_data AS T1 JOIN car_names AS T2 ON T1 . id = T2 . makeid WHERE T1 . horsepower > ( SELECT min ( horsepower ) FROM cars_data ) AND T1 . cylinders < 4 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "169", "plan": "SELECT max ( mpg ) FROM cars_data WHERE cylinders = 8 OR year < 1980", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "170", "plan": "SELECT max ( mpg ) FROM cars_data WHERE cylinders = 8 OR year < 1980", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( ford ) , fullname ( Ford Motor Company ) , country | model_list : modelid , maker , model ( ford ) | car_names : makeid , model ( ford ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "171", "plan": "SELECT DISTINCT T1 . model FROM model_list AS T1 JOIN car_names AS T2 ON T1 . model = T2 . model JOIN cars_data AS T3 ON T2 . makeid = T3 . id JOIN car_makers AS T4 ON T1 . maker = T4 . id WHERE T3 . weight < 3500 AND T4 . fullname != 'Ford Motor Company' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( ford ) , fullname ( Ford Motor Company ) , country | model_list : modelid , maker , model ( ford ) | car_names : makeid , model ( ford ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "172", "plan": "SELECT DISTINCT T1 . model FROM model_list AS T1 JOIN car_names AS T2 ON T1 . model = T2 . model JOIN cars_data AS T3 ON T2 . makeid = T3 . id JOIN car_makers AS T4 ON T1 . maker = T4 . id WHERE T3 . weight < 3500 AND T4 . fullname != 'Ford Motor Company' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "173", "plan": "SELECT countryName FROM countries EXCEPT SELECT T1 . countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1 . countryid = T2 . country ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the name of the countries where there is not a single car maker?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "174", "plan": "SELECT countryname FROM countries EXCEPT SELECT T1 . countryName FROM countries AS T1 JOIN car_makers AS T2 ON T1 . countryid = T2 . country ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the names of the countries with no car makers?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "175", "plan": "SELECT T1 . id , T1 . maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker GROUP BY T1 . id HAVING count ( * ) >= 2 INTERSECT SELECT T1 . id , T1 . maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker JOIN car_names AS T3 ON T2 . model = T3 . model GROUP BY T1 . id HAVING count ( * ) > 3 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker ."}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "176", "plan": "SELECT T1 . id , T1 . maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker GROUP BY T1 . id HAVING count ( * ) >= 2 INTERSECT SELECT T1 . id , T1 . maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1 . id = T2 . maker JOIN car_names AS T3 ON T2 . model = T3 . model GROUP BY T1 . id HAVING count ( * ) > 3 ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( fiat ) , fullname ( Fiat ) , country | model_list : modelid , maker , model ( fiat ) | car_names : makeid , model ( fiat ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "177", "plan": "SELECT T1 . countryId , T1 . countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1 . countryid = T2 . country GROUP BY T1 . countryid HAVING count ( * ) > 3 UNION SELECT T1 . countryid , T1 . countryName FROM countries AS T1 JOIN car_makers AS T2 ON T1 . countryid = T2 . country JOIN model_list AS T3 ON T2 . id = T3 . maker WHERE T3 . model = 'fiat' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?"}
{"db_schema_with_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( fiat ) , fullname ( Fiat ) , country | model_list : modelid , maker , model ( fiat ) | car_names : makeid , model ( fiat ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "db_schema_without_val": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year", "dialogue_id": "178", "plan": "SELECT T1 . countryid , T1 . countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1 . countryid = T2 . country GROUP BY T1 . countryid HAVING count ( * ) > 3 UNION SELECT T1 . countryid , T1 . countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1 . countryid = T2 . country JOIN model_list AS T3 ON T2 . id = T3 . maker WHERE T3 . model = 'fiat' ; ", "schema_name": "car_1", "turn_part_index": 0, "utterance": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "179", "plan": "SELECT country FROM airlines WHERE airline = \"JetBlue Airways\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which country does Airline \"JetBlue Airways\" belong to?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "180", "plan": "SELECT country FROM airlines WHERE airline = \"JetBlue Airways\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What country is Jetblue Airways affiliated with?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "181", "plan": "SELECT abbreviation FROM airlines WHERE airline = \"JetBlue Airways\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What is the abbreviation of Airline \"JetBlue Airways\"?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "182", "plan": "SELECT abbreviation FROM airlines WHERE airline = \"JetBlue Airways\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Which abbreviation corresponds to Jetblue Airways?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "183", "plan": "SELECT airline , abbreviation FROM airlines WHERE country = \"USA\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "List all airline names and their abbreviations in \"USA\"."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "184", "plan": "SELECT airline , abbreviation FROM airlines WHERE country = \"USA\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What are the airline names and abbreviations for airlines in the USA?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Anthony  ) , airportcode , airportname ( Anthony  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "185", "plan": "SELECT airportcode , airportname FROM airports WHERE city = \"Anthony\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "List the airport code and name in the city of Anthony."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Anthony  ) , airportcode , airportname ( Anthony  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "186", "plan": "SELECT airportcode , airportname FROM airports WHERE city = \"Anthony\"", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "Give the airport code and airport name corresonding to the city Anthony."}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "187", "plan": "SELECT count ( * ) FROM airlines", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "How many airlines do we have?"}
{"db_schema_with_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "db_schema_without_val": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport", "dialogue_id": "188", "plan": "SELECT count ( * ) FROM airlines", "schema_name": "flight_2", "turn_part_index": 0, "utterance": "What is the total number of airlines?"}
