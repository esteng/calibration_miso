{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Customer reviews ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "365", "plan": "SELECT T1 . paragraph_text FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id WHERE T2 . document_name = \"Customer reviews\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all paragraph texts for the document \"Customer reviews\"."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Customer reviews ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "366", "plan": "SELECT T1 . paragraph_text FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id WHERE T2 . document_name = \"Customer reviews\"", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the paragraph texts for the document with the name 'Customer reviews'?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "367", "plan": "SELECT document_id , count ( * ) FROM paragraphs GROUP BY document_id ORDER BY document_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all document ids and the number of paragraphs in each document. Order by document id."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "368", "plan": "SELECT document_id , count ( * ) FROM paragraphs GROUP BY document_id ORDER BY document_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "369", "plan": "SELECT T1 . document_id , T2 . document_name , count ( * ) FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id GROUP BY T1 . document_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show all document ids, names and the number of paragraphs in each document."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "370", "plan": "SELECT T1 . document_id , T2 . document_name , count ( * ) FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id GROUP BY T1 . document_id", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the ids and names of each document, as well as the number of paragraphs in each?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "371", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count ( * ) >= 2", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "List all document ids with at least two paragraphs."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "372", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count ( * ) >= 2", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the ids of documents that have 2 or more paragraphs?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "373", "plan": "SELECT T1 . document_id , T2 . document_name FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id GROUP BY T1 . document_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the document id and name with greatest number of paragraphs?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "374", "plan": "SELECT T1 . document_id , T2 . document_name FROM paragraphs AS T1 JOIN documents AS T2 ON T1 . document_id = T2 . document_id GROUP BY T1 . document_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the id and name of the document with the most paragraphs."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "375", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count ( * ) ASC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the document id with least number of paragraphs?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "376", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count ( * ) ASC LIMIT 1", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Return the id of the document with the fewest paragraphs."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "377", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count ( * ) BETWEEN 1 AND 2", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What is the document id with 1 to 2 paragraphs?"}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "378", "plan": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count ( * ) BETWEEN 1 AND 2", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Give the ids of documents that have between one and two paragraphs."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text ( Ireland , Brazil ) , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "379", "plan": "SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "Show the document id with paragraph text 'Brazil' and 'Ireland'."}
{"db_schema_with_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text ( Ireland , Brazil ) , other_details", "db_schema_without_val": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details", "dialogue_id": "380", "plan": "SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'", "schema_name": "cre_Doc_Template_Mgt", "turn_part_index": 0, "utterance": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "381", "plan": "SELECT count ( * ) FROM teacher", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "How many teachers are there?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "382", "plan": "SELECT count ( * ) FROM teacher", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What is the total count of teachers?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "383", "plan": "SELECT name FROM teacher ORDER BY age ASC", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "List the names of teachers in ascending order of age."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "384", "plan": "SELECT name FROM teacher ORDER BY age ASC", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers ordered by ascending age?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "385", "plan": "SELECT age , hometown FROM teacher", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the age and hometown of teachers?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "386", "plan": "SELECT age , hometown FROM teacher", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What is the age and hometown of every teacher?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "387", "plan": "SELECT name FROM teacher WHERE hometown != \"little lever urban district\"", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "List the name of teachers whose hometown is not `` Little Lever Urban District '' ."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "388", "plan": "SELECT name FROM teacher WHERE hometown != \"little lever urban district\"", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "389", "plan": "SELECT name FROM teacher WHERE age = 32 OR age = 33", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show the name of teachers aged either 32 or 33?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "390", "plan": "SELECT name FROM teacher WHERE age = 32 OR age = 33", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers who are aged either 32 or 33?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "391", "plan": "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What is the hometown of the youngest teacher?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "392", "plan": "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Where is the youngest teacher from?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "393", "plan": "SELECT hometown , count ( * ) FROM teacher GROUP BY hometown", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show different hometown of teachers and the number of teachers from each hometown."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "394", "plan": "SELECT hometown , count ( * ) FROM teacher GROUP BY hometown", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "For each hometown, how many teachers are there?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "395", "plan": "SELECT hometown FROM teacher GROUP BY hometown ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "List the most common hometown of teachers."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "396", "plan": "SELECT hometown FROM teacher GROUP BY hometown ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What is the most commmon hometowns for teachers?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "397", "plan": "SELECT hometown FROM teacher GROUP BY hometown HAVING count ( * ) >= 2", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show the hometowns shared by at least two teachers."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "398", "plan": "SELECT hometown FROM teacher GROUP BY hometown HAVING count ( * ) >= 2", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the towns from which at least two teachers come from?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "399", "plan": "SELECT T3 . name , T2 . course FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show names of teachers and the courses they are arranged to teach."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "400", "plan": "SELECT T3 . name , T2 . course FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What is the name of each teacher and what course they teach?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "401", "plan": "SELECT T3 . name , T2 . course FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id ORDER BY T3 . name", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "402", "plan": "SELECT T3 . name , T2 . course FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id ORDER BY T3 . name", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course ( Math ) | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "403", "plan": "SELECT T3 . name FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id WHERE T2 . course = \"Math\"", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show the name of the teacher for the math course."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course ( Math ) | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "404", "plan": "SELECT T3 . name FROM course_arrange AS T1 JOIN course AS T2 ON T1 . course_id = T2 . course_id JOIN teacher AS T3 ON T1 . teacher_id = T3 . teacher_id WHERE T2 . course = \"Math\"", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the people who teach math courses?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "405", "plan": "SELECT T2 . name , count ( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1 . teacher_id = T2 . teacher_id GROUP BY T2 . name", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show names of teachers and the number of courses they teach."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "406", "plan": "SELECT T2 . name , count ( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1 . teacher_id = T2 . teacher_id GROUP BY T2 . name", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers and how many courses do they teach?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "407", "plan": "SELECT T2 . name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1 . teacher_id = T2 . teacher_id GROUP BY T2 . name HAVING count ( * ) >= 2", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "Show names of teachers that teach at least two courses."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "408", "plan": "SELECT T2 . name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1 . teacher_id = T2 . teacher_id GROUP BY T2 . name HAVING count ( * ) >= 2", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers who teach at least two courses?"}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "409", "plan": "SELECT name FROM teacher WHERE teacher_id NOT IN ( SELECT teacher_id FROM course_arrange )", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "List the names of teachers who have not been arranged to teach courses."}
{"db_schema_with_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "db_schema_without_val": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade", "dialogue_id": "410", "plan": "SELECT name FROM teacher WHERE teacher_id NOT IN ( SELECT teacher_id FROM course_arrange )", "schema_name": "course_teach", "turn_part_index": 0, "utterance": "What are the names of the teachers whose courses have not been arranged?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "411", "plan": "SELECT count ( * ) FROM visitor WHERE age < 30", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "How many visitors below age 30 are there?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "412", "plan": "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "413", "plan": "SELECT avg ( age ) FROM visitor WHERE level_of_membership <= 4", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What is the average age of the visitors whose membership level is not higher than 4?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "414", "plan": "SELECT name , level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "415", "plan": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the id and name of the museum that has the most staff members?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "416", "plan": "SELECT avg ( num_of_staff ) FROM museum WHERE open_year < 2009", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the average number of staff working for the museums that were open before 2009."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name ( Plaza Museum ) , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "417", "plan": "SELECT num_of_staff , open_year FROM museum WHERE name = 'Plaza Museum'", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What are the opening year and staff number of the museum named Plaza Museum?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "418", "plan": "SELECT name FROM museum WHERE num_of_staff > ( SELECT min ( num_of_staff ) FROM museum WHERE open_year > 2010 )", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "419", "plan": "SELECT T1 . id , T1 . name , T1 . age FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id GROUP BY T1 . id HAVING count ( * ) > 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "find the id, name and age for visitors who visited some museums more than once."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "420", "plan": "SELECT T2 . visitor_id , T1 . name , T1 . level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id GROUP BY T2 . visitor_id ORDER BY sum ( T2 . total_spent ) DESC LIMIT 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "421", "plan": "SELECT T2 . museum_id , T1 . name FROM museum AS T1 JOIN visit AS T2 ON T1 . museum_id = T2 . museum_id GROUP BY T2 . museum_id ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What are the id and name of the museum visited most times?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "422", "plan": "SELECT name FROM museum WHERE museum_id NOT IN ( SELECT museum_id FROM visit )", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What is the name of the museum that had no visitor yet?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "423", "plan": "SELECT T1 . name , T1 . age FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id ORDER BY T2 . num_of_ticket DESC LIMIT 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the name and age of the visitor who bought the most tickets at once."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "424", "plan": "SELECT avg ( num_of_ticket ) , max ( num_of_ticket ) FROM visit", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What are the average and maximum number of tickets bought in all visits?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "425", "plan": "SELECT sum ( T2 . total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id WHERE T1 . level_of_membership = 1", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What is the total ticket expense of the visitors whose membership level is 1?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "426", "plan": "SELECT T1 . name FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id JOIN museum AS T3 ON T3 . museum_id = T2 . museum_id WHERE T3 . open_year < 2009 INTERSECT SELECT T1 . name FROM visitor AS T1 JOIN visit AS T2 ON T1 . id = T2 . visitor_id JOIN museum AS T3 ON T3 . museum_id = T2 . museum_id WHERE T3 . open_year > 2011", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?"}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "427", "plan": "SELECT count ( * ) FROM visitor WHERE id NOT IN ( SELECT T2 . visitor_id FROM museum AS T1 JOIN visit AS T2 ON T1 . museum_id = T2 . museum_id WHERE T1 . open_year > 2010 )", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "Find the number of visitors who did not visit any museum opened after 2010."}
{"db_schema_with_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "db_schema_without_val": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent", "dialogue_id": "428", "plan": "SELECT count ( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008", "schema_name": "museum_visit", "turn_part_index": 0, "utterance": "How many museums were opened after 2013 or before 2008?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "429", "plan": "SELECT count ( * ) FROM players", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the total number of players."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "430", "plan": "SELECT count ( * ) FROM players", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many players are there?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "431", "plan": "SELECT count ( * ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the total number of matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "432", "plan": "SELECT count ( * ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Count the number of matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code ( USA ) | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc ( USA ) , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc ( USA ) , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "433", "plan": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "List the first name and birth date of all players from the country with code USA."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code ( USA ) | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc ( USA ) , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc ( USA ) , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "434", "plan": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the first names and birth dates of players from the USA?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "435", "plan": "SELECT avg ( loser_age ) , avg ( winner_age ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the average age of losers and winners of all matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "436", "plan": "SELECT avg ( loser_age ) , avg ( winner_age ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the average ages of losers and winners across matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "437", "plan": "SELECT avg ( winner_rank ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the average rank of winners in all matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "438", "plan": "SELECT avg ( winner_rank ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the average rank for winners in all matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "439", "plan": "SELECT min ( loser_rank ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the highest rank of losers in all matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "440", "plan": "SELECT min ( loser_rank ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the best rank of losers across all matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "441", "plan": "SELECT count ( DISTINCT country_code ) FROM players", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "find the number of distinct country codes of all players."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "442", "plan": "SELECT count ( DISTINCT country_code ) FROM players", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many distinct countries do players come from?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "443", "plan": "SELECT count ( DISTINCT loser_name ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the number of distinct name of losers."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "444", "plan": "SELECT count ( DISTINCT loser_name ) FROM matches", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many different loser names are there?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "445", "plan": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * ) > 10", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the name of tourney that has more than 10 matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "446", "plan": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * ) > 10", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the names of tournaments that have more than 10 matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "447", "plan": "SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "List the names of all winners who played in both 2013 and 2016."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "448", "plan": "SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the names of players who won in both 2013 and 2016?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "449", "plan": "SELECT count ( * ) FROM matches WHERE year = 2013 OR year = 2016", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "List the number of all matches who played in years of 2013 or 2016."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "450", "plan": "SELECT count ( * ) FROM matches WHERE year = 2013 OR year = 2016", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many matches were played in 2013 or 2016?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( WTA Championships , Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "451", "plan": "SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN matches AS T2 ON T1 . player_id = T2 . winner_id WHERE T2 . tourney_name = 'WTA Championships' INTERSECT SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN matches AS T2 ON T1 . player_id = T2 . winner_id WHERE T2 . tourney_name = 'Australian Open'", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( WTA Championships , Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "452", "plan": "SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN matches AS T2 ON T1 . player_id = T2 . winner_id WHERE T2 . tourney_name = 'WTA Championships' INTERSECT SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN matches AS T2 ON T1 . player_id = T2 . winner_id WHERE T2 . tourney_name = 'Australian Open'", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "453", "plan": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the first name and country code of the oldest player."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "454", "plan": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the first name and country code of the oldest player?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date , Last ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "455", "plan": "SELECT first_name , last_name FROM players ORDER BY birth_date", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "List the first and last name of all players in the order of birth date."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "456", "plan": "SELECT first_name , last_name FROM players ORDER BY birth_date", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the full names of all players, sorted by birth date?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date , Last ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "457", "plan": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "List the first and last name of all players who are left / L hand in the order of birth date."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "458", "plan": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the full names of all left handed players, in order of birth date?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "459", "plan": "SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id ORDER BY T2 . tours DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the first name and country code of the player who did the most number of tours."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "460", "plan": "SELECT T1 . country_code , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id ORDER BY T2 . tours DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the first name and country code of the player with the most tours?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "461", "plan": "SELECT year FROM matches GROUP BY year ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the year that has the most number of matches."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "462", "plan": "SELECT year FROM matches GROUP BY year ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Which year had the most matches?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "463", "plan": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the name and rank points of the winner who won the most times."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "464", "plan": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the name of the winner who has won the most matches, and how many rank points does this player have?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "465", "plan": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( Australian Open ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "466", "plan": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "467", "plan": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "find the names of loser and winner who played in the match with greatest number of minutes."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "468", "plan": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the names of the winner and loser who played in the longest match?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "469", "plan": "SELECT avg ( ranking ) , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id GROUP BY T1 . first_name", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the average ranking for each player and their first name."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "470", "plan": "SELECT avg ( ranking ) , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id GROUP BY T1 . first_name", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the first names of all players, and their average rankings?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "471", "plan": "SELECT sum ( ranking_points ) , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id GROUP BY T1 . first_name", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "Find the total ranking points for each player and their first name."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "472", "plan": "SELECT sum ( ranking_points ) , T1 . first_name FROM players AS T1 JOIN rankings AS T2 ON T1 . player_id = T2 . player_id GROUP BY T1 . first_name", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What are the first names of all players, and their total ranking points?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "473", "plan": "SELECT count ( * ) , country_code FROM players GROUP BY country_code", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "find the number of players for each country."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "474", "plan": "SELECT count ( * ) , country_code FROM players GROUP BY country_code", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "How many players are from each country?"}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "475", "plan": "SELECT country_code FROM players GROUP BY country_code ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "find the code of the country where has the greatest number of players."}
{"db_schema_with_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "db_schema_without_val": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours", "dialogue_id": "476", "plan": "SELECT country_code FROM players GROUP BY country_code ORDER BY count ( * ) DESC LIMIT 1", "schema_name": "wta_1", "turn_part_index": 0, "utterance": "What is the code of the country with the most players?"}
